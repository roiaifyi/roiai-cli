name: Bump Version and Tag

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: 'Custom version (only used if version_type is custom)'
        required: false
        type: string
      create_release:
        description: 'Create release after tagging'
        required: false
        type: boolean
        default: false

jobs:
  bump-and-tag:
    runs-on: ubuntu-latest

    permissions: write-all

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Determine new version
        id: new_version
        run: |
          if [ "${{ inputs.version_type }}" = "custom" ]; then
            if [ -z "${{ inputs.custom_version }}" ]; then
              echo "Error: Custom version not provided"
              exit 1
            fi
            NEW_VERSION="${{ inputs.custom_version }}"
            # Update package.json with custom version
            npm version $NEW_VERSION --no-git-tag-version
          else
            # Use npm version to bump
            npm version ${{ inputs.version_type }} --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
          fi
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          DATE=$(date +%Y-%m-%d)

          # Create CHANGELOG.md if it doesn't exist
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Create a temporary file with the new section
          echo -e "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n## [Unreleased]\n\n## [$NEW_VERSION] - $DATE\n" > temp_changelog.md

          # Extract content after [Unreleased] and before the next version section
          if grep -q "## \[Unreleased\]" CHANGELOG.md; then
            sed -n '/## \[Unreleased\]/,/## \[/{/## \[Unreleased\]/d; /## \[/d; p;}' CHANGELOG.md >> temp_changelog.md
          else
            echo "### Changed" >> temp_changelog.md
            echo "- See commit history for changes" >> temp_changelog.md
            echo "" >> temp_changelog.md
          fi

          # Add the rest of the changelog if it exists
          if [ -f CHANGELOG.md ] && grep -q "## \[.*\] -" CHANGELOG.md; then
            sed -n '/## \[.*\] -/,$p' CHANGELOG.md >> temp_changelog.md
          fi

          # Replace the original file
          mv temp_changelog.md CHANGELOG.md

      - name: Commit version bump
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"

      - name: Create and push tag
        id: create_tag
        run: |
          TAG="v${{ steps.new_version.outputs.version }}"
          git tag -a "$TAG" -m "Version ${{ steps.new_version.outputs.version }}"
          git push origin main
          git push origin "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "## ðŸ“‹ Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.current_version.outputs.version }} â†’ ${{ steps.new_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ steps.create_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.create_release }}" == "true" ]; then
            echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "The release workflow will be triggered automatically for tag ${{ steps.create_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "To create a release from this tag:" >> $GITHUB_STEP_SUMMARY
            echo "1. Go to Actions â†’ Release from Tag" >> $GITHUB_STEP_SUMMARY
            echo "2. Run workflow with tag: ${{ steps.create_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Trigger release workflow
        if: inputs.create_release == true
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release-from-tag.yml',
              ref: 'main',
              inputs: {
                tag: '${{ steps.create_tag.outputs.tag }}',
                skip_tests: 'false'
              }
            })
            console.log('Triggered release workflow for tag ${{ steps.create_tag.outputs.tag }}')
          github-token: ${{ secrets.GITHUB_TOKEN }}