name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: 'Custom version (only used if version_type is custom)'
        required: false
        type: string
      skip_tests:
        description: 'Skip tests'
        required: false
        type: boolean
        default: false

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run prisma:generate

      - name: Run tests
        if: ${{ !inputs.skip_tests }}
        run: npm test

      - name: Build project
        run: npm run build

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Determine new version
        id: new_version
        run: |
          if [ "${{ inputs.version_type }}" = "custom" ]; then
            if [ -z "${{ inputs.custom_version }}" ]; then
              echo "Error: Custom version not provided"
              exit 1
            fi
            NEW_VERSION="${{ inputs.custom_version }}"
            # Update package.json with custom version
            npm version $NEW_VERSION --no-git-tag-version
          else
            # Use npm version to bump
            npm version ${{ inputs.version_type }} --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
          fi
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Create a temporary file with the new section
          echo -e "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n## [Unreleased]\n\n## [$NEW_VERSION] - $DATE\n" > temp_changelog.md
          
          # Extract content after [Unreleased] and before the next version section
          if grep -q "## \[Unreleased\]" CHANGELOG.md; then
            sed -n '/## \[Unreleased\]/,/## \[/{/## \[Unreleased\]/d; /## \[/d; p;}' CHANGELOG.md >> temp_changelog.md
          else
            echo "### Added" >> temp_changelog.md
            echo "- See commit history for changes" >> temp_changelog.md
            echo "" >> temp_changelog.md
          fi
          
          # Add the rest of the changelog if it exists
          if [ -f CHANGELOG.md ] && grep -q "## \[.*\] -" CHANGELOG.md; then
            sed -n '/## \[.*\] -/,$p' CHANGELOG.md >> temp_changelog.md
          fi
          
          # Replace the original file
          mv temp_changelog.md CHANGELOG.md

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Generate release notes
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "Initial release of roiai-cli" >> $GITHUB_OUTPUT
          else
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> $GITHUB_OUTPUT
          fi
          
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Store previous tag for later use
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: release v${{ steps.new_version.outputs.version }}"

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.new_version.outputs.version }}" -m "Release v${{ steps.new_version.outputs.version }}"
          git push origin main
          git push origin "v${{ steps.new_version.outputs.version }}"

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          release_name: Release v${{ steps.new_version.outputs.version }}
          body: |
            ## Installation
            
            ```bash
            npm install -g roiai@${{ steps.new_version.outputs.version }}
            ```
            
            ${{ steps.release_notes.outputs.RELEASE_NOTES }}
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.release_notes.outputs.previous_tag }}...v${{ steps.new_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Summary
        run: |
          echo "## ðŸŽ‰ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.current_version.outputs.version }} â†’ ${{ steps.new_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Package**: [roiai@${{ steps.new_version.outputs.version }}](https://www.npmjs.com/package/roiai/v/${{ steps.new_version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: [v${{ steps.new_version.outputs.version }}](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.new_version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify the NPM package is published correctly" >> $GITHUB_STEP_SUMMARY
          echo "2. Test installation: \`npm install -g roiai@${{ steps.new_version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Update any documentation if needed" >> $GITHUB_STEP_SUMMARY