/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticate user with email/username and password
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User registration
         * @description Create a new user account
         */
        post: operations["signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change password
         * @description Change the current user's password
         */
        post: operations["changePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/delete-account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete account
         * @description Permanently delete the current user's account
         */
        delete: operations["deleteAccount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cli/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * CLI login
         * @description Authenticate CLI client and receive API key
         */
        post: operations["cliLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cli/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * CLI logout
         * @description Logout from the CLI by revoking the API key associated with the current machine.
         *     This endpoint removes the API key that was created during CLI login for the specific machine.
         *
         */
        post: operations["cliLogout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cli/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * CLI health check
         * @description Check if CLI credentials (API key) are valid before attempting to sync data.
         *     Returns user and machine information if authenticated successfully.
         *
         */
        get: operations["cliHealthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cli/upsync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync usage data from CLI
         * @description Uploads AI usage data from the CLI client. This endpoint processes messages
         *     and their associated entities (machines, projects, sessions), updating
         *     aggregate statistics and deduplicating existing messages.
         *
         */
        post: operations["upsyncData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List API keys
         * @description Get all API keys for the authenticated user
         */
        get: operations["listApiKeys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/api-keys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API key
         * @description Get details of a specific API key
         */
        get: operations["getApiKey"];
        /**
         * Update API key
         * @description Update an API key's name
         */
        put: operations["updateApiKey"];
        post?: never;
        /**
         * Delete API key
         * @description Delete an API key
         */
        delete: operations["deleteApiKey"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SuccessResponse: {
            /**
             * @description Indicates successful operation
             * @enum {boolean}
             */
            success: true;
            /** @description Response data payload */
            data: {
                [key: string]: unknown;
            };
        };
        ErrorResponse: {
            /**
             * @description Indicates failed operation
             * @enum {boolean}
             */
            success: false;
            error: components["schemas"]["ApiError"];
        };
        ApiError: {
            code: components["schemas"]["ErrorCode"];
            /** @description Human-readable error message */
            message: string;
            /** @description Additional error details */
            details?: {
                [key: string]: unknown;
            };
        };
        /**
         * @description Standardized error codes
         * @enum {string}
         */
        ErrorCode: "AUTH_001" | "AUTH_002" | "AUTH_003" | "AUTH_004" | "VAL_001" | "VAL_002" | "VAL_003" | "DB_001" | "DB_002" | "DB_003" | "RATE_001" | "SRV_001" | "SRV_002" | "SYNC_001" | "SYNC_002" | "SYNC_003" | "SYNC_004" | "SYNC_005" | "SYNC_006";
        Error: {
            /**
             * @description Error code
             * @example VALIDATION_ERROR
             */
            code: string;
            /**
             * @description Human-readable error message
             * @example Invalid request data
             */
            message: string;
            /** @description Additional error details */
            details?: {
                [key: string]: unknown;
            };
        };
        ValidationError: {
            /** @enum {string} */
            code: "VALIDATION_ERROR";
            /** @example Validation failed */
            message: string;
            /** @example {
             *       "messages": "Required",
             *       "metadata": "Required"
             *     } */
            errors: {
                [key: string]: string;
            };
        };
        /**
         * @description Error codes for sync message processing failures
         * @enum {string}
         */
        SyncErrorCode: "SYNC_001" | "SYNC_002" | "SYNC_003" | "SYNC_004" | "SYNC_005" | "SYNC_006";
        SyncFailureDetail: {
            /**
             * @description ID of the failed message
             * @example chatcmpl-125ghi
             */
            messageId: string;
            /**
             * @description Human-readable error message
             * @example Session not found
             */
            error: string;
            code: components["schemas"]["SyncErrorCode"];
        };
        UserEntity: {
            /**
             * @description User ID
             * @example user_123
             */
            id: string;
            /**
             * Format: email
             * @description User email address
             * @example user@example.com
             */
            email?: string;
            /**
             * @description Username
             * @example johndoe
             */
            username?: string;
        };
        MachineEntity: {
            /**
             * @description Machine ID
             * @example machine_123
             */
            id: string;
            /**
             * @description User ID who owns this machine
             * @example user_123
             */
            userId: string;
            /**
             * @description Machine name
             * @example John's MacBook Pro
             */
            machineName: string;
            /**
             * @description Local machine identifier
             * @example local_machine_456
             */
            localMachineId: string;
        };
        ProjectEntity: {
            /**
             * @description Project ID
             * @example proj_abc123
             */
            id: string;
            /**
             * @description Project name
             * @example my-ai-app
             */
            projectName: string;
            /**
             * @description User ID who owns this project
             * @example user_123
             */
            userId: string;
            /**
             * @description Machine ID where project is located
             * @example machine_123
             */
            clientMachineId: string;
        };
        SessionEntity: {
            /**
             * @description Session ID
             * @example sess_def456
             */
            id: string;
            /**
             * @description Project ID this session belongs to
             * @example proj_abc123
             */
            projectId: string;
            /**
             * @description User ID who owns this session
             * @example user_123
             */
            userId: string;
            /**
             * @description Machine ID where session occurred
             * @example machine_123
             */
            clientMachineId: string;
        };
        MessageEntity: {
            /**
             * @description Unique message ID
             * @example msg_xyz789
             */
            id: string;
            /**
             * @description External message ID from AI service
             * @example chatcmpl-123abc
             */
            messageId: string;
            /**
             * @description Session ID this message belongs to (nullable for partial processing)
             * @example sess_def456
             */
            sessionId?: string | null;
            /**
             * @description Project ID this message belongs to (nullable for partial processing)
             * @example proj_abc123
             */
            projectId?: string | null;
            /**
             * @description User ID who owns this message
             * @example user_123
             */
            userId: string;
            /**
             * @description Message role
             * @example assistant
             * @enum {string}
             */
            role: "user" | "assistant" | "system";
            /**
             * @description AI model used
             * @example gpt-4
             */
            model?: string;
            /**
             * @description Number of input tokens
             * @example 150
             */
            inputTokens: number;
            /**
             * @description Number of output tokens
             * @example 50
             */
            outputTokens: number;
            /**
             * @description Number of cache creation tokens
             * @example 0
             */
            cacheCreationTokens: number;
            /**
             * @description Number of cache read tokens
             * @example 0
             */
            cacheReadTokens: number;
            /**
             * Format: float
             * @description Cost of the message
             * @example 0.0075
             */
            messageCost: number;
            /**
             * Format: date-time
             * @description Message timestamp
             * @example 2024-01-15T10:30:00Z
             */
            timestamp?: string;
            /**
             * @description Who wrote this message
             * @example assistant
             * @enum {string}
             */
            writer: "human" | "agent" | "assistant";
            /**
             * @description Machine ID where this message was generated
             * @example machine_123
             */
            machineId: string;
            /**
             * Format: float
             * @description Price per input token for this model
             * @example 0.00003
             */
            pricePerInputToken: number;
            /**
             * Format: float
             * @description Price per output token for this model
             * @example 0.00006
             */
            pricePerOutputToken: number;
            /**
             * Format: float
             * @description Price per cache write token for this model
             * @example 0.00015
             */
            pricePerCacheWriteToken: number;
            /**
             * Format: float
             * @description Price per cache read token for this model
             * @example 0.000015
             */
            pricePerCacheReadToken: number;
            /**
             * @description Cache duration in minutes for this model
             * @example 60
             */
            cacheDurationMinutes: number;
        };
        LoginRequest: {
            /**
             * Format: email
             * @description User email address
             * @example user@example.com
             */
            email?: string;
            /**
             * @description Username
             * @example johndoe
             */
            username?: string;
            /**
             * Format: password
             * @description User password
             * @example SecurePassword123
             */
            password: string;
        } & (unknown | unknown);
        SignupRequest: {
            /**
             * Format: email
             * @description User email address
             * @example user@example.com
             */
            email: string;
            /**
             * @description Username (3-20 characters, alphanumeric with underscores and hyphens)
             * @example johndoe
             */
            username: string;
            /**
             * Format: password
             * @description User password (min 8 chars, at least one letter and one number)
             * @example SecurePassword123
             */
            password: string;
        };
        AuthResponse: {
            user: components["schemas"]["UserEntity"];
            /**
             * @description JWT authentication token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            token: string;
        };
        CliLoginRequest: {
            /**
             * Format: email
             * @description User email address
             * @example user@example.com
             */
            email?: string;
            /**
             * @description Username
             * @example johndoe
             */
            username?: string;
            /**
             * Format: password
             * @description User password
             * @example SecurePassword123
             */
            password: string;
            machine_info: {
                /**
                 * @description Unique machine identifier
                 * @example machine_123
                 */
                machine_id: string;
                /**
                 * @description Machine name
                 * @example John's MacBook Pro
                 */
                machine_name: string;
                /**
                 * @description Operating system platform
                 * @example darwin
                 */
                platform?: string;
                /**
                 * @description Machine hostname
                 * @example johns-macbook.local
                 */
                hostname?: string;
                /**
                 * @description Operating system version
                 * @example macOS 14.0
                 */
                os_version?: string;
            };
        } & (unknown | unknown);
        CliLoginResponse: {
            user: components["schemas"]["UserEntity"];
            /**
             * @description API key for CLI authentication
             * @example roiai_1234567890abcdef
             */
            api_key: string;
        };
        HealthCheckResponse: {
            /**
             * @description Whether the API key is valid
             * @example true
             */
            authenticated: boolean;
            user: {
                /**
                 * @description User ID
                 * @example user_123
                 */
                id: string;
                /**
                 * Format: email
                 * @description User email
                 * @example user@example.com
                 */
                email: string;
                /**
                 * @description Username
                 * @example johndoe
                 */
                username: string;
            };
            /** @description Machine information (only present if authenticated with API key) */
            machine?: {
                /**
                 * @description Machine ID
                 * @example machine_123
                 */
                id?: string;
                /**
                 * @description Machine name
                 * @example John's MacBook Pro
                 */
                name?: string;
            };
        };
        ChangePasswordRequest: {
            /**
             * Format: password
             * @description Current password
             * @example OldPassword123
             */
            currentPassword: string;
            /**
             * Format: password
             * @description New password (min 8 chars)
             * @example NewPassword123
             */
            newPassword: string;
        };
        DeleteAccountRequest: {
            /**
             * Format: password
             * @description User password for confirmation
             * @example SecurePassword123
             */
            password: string;
        };
        ApiKeyResponse: {
            /**
             * @description API key ID
             * @example key_123
             */
            id: string;
            /**
             * @description API key name
             * @example CLI - John's MacBook Pro - 2024-01-01
             */
            name?: string | null;
            /**
             * @description Machine ID associated with this key
             * @example machine_123
             */
            machineId?: string | null;
            /**
             * @description Machine name associated with this key
             * @example John's MacBook Pro
             */
            machineName?: string | null;
            /** @description Machine information */
            machineInfo?: {
                [key: string]: unknown;
            } | null;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last usage timestamp
             * @example 2024-01-15T12:00:00Z
             */
            lastUsedAt?: string | null;
            /**
             * @description Whether the key is active
             * @example true
             */
            isActive: boolean;
        };
        ApiKeyUpdateRequest: {
            /**
             * @description New name for the API key
             * @example Production Server Key
             */
            name?: string;
        };
        PushRequest: {
            /** @description Array of messages to sync */
            messages: components["schemas"]["MessageEntity"][];
            entities: {
                /** @description Map of machine IDs to machine entities */
                machines: {
                    [key: string]: components["schemas"]["MachineEntity"];
                };
                /** @description Map of project IDs to project entities */
                projects: {
                    [key: string]: components["schemas"]["ProjectEntity"];
                };
                /** @description Map of session IDs to session entities */
                sessions: {
                    [key: string]: components["schemas"]["SessionEntity"];
                };
            };
        };
        PushResponse: {
            /**
             * @description Unique sync operation ID (UUID v4)
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            syncId: string;
            results: {
                persisted: {
                    /**
                     * @description Number of new messages persisted
                     * @example 1
                     */
                    count: number;
                    /**
                     * @description IDs of persisted messages
                     * @example [
                     *       "chatcmpl-123abc"
                     *     ]
                     */
                    messageIds: string[];
                };
                deduplicated: {
                    /**
                     * @description Number of duplicate messages skipped
                     * @example 0
                     */
                    count: number;
                    /**
                     * @description IDs of deduplicated messages
                     * @example []
                     */
                    messageIds: string[];
                };
                failed: {
                    /**
                     * @description Number of messages that failed to process
                     * @example 0
                     */
                    count: number;
                    /** @description Details of failed messages */
                    details: components["schemas"]["SyncFailureDetail"][];
                };
            };
            summary: {
                /**
                 * @description Total messages in the batch
                 * @example 1
                 */
                totalMessages: number;
                /**
                 * @description Number of messages successfully processed
                 * @example 1
                 */
                messagesSucceeded: number;
                /**
                 * @description Number of messages that failed
                 * @example 0
                 */
                messagesFailed: number;
                /**
                 * @description Processing time in milliseconds
                 * @example 123
                 */
                processingTimeMs: number;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "AUTH_001",
                     *       "message": "Invalid credentials"
                     *     } */
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignupRequest"];
            };
        };
        responses: {
            /** @description User created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            /** @description User already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "DB_001",
                     *       "message": "Email already exists"
                     *     } */
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordRequest"];
            };
        };
        responses: {
            /** @description Password changed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "success": true,
                     *       "message": "Password updated successfully"
                     *     } */
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            /** @description Invalid current password or unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteAccountRequest"];
            };
        };
        responses: {
            /** @description Account deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "success": true,
                     *       "message": "Account deleted successfully"
                     *     } */
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            /** @description Invalid password or unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    cliLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CliLoginRequest"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CliLoginResponse"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "AUTH_001",
                     *       "message": "Invalid credentials"
                     *     } */
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    cliLogout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully logged out */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "success": true,
                     *       "message": "Successfully logged out"
                     *     } */
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "UNAUTHORIZED",
                     *       "message": "Invalid API key"
                     *     } */
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description API key not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "NOT_FOUND",
                     *       "message": "API key not found"
                     *     } */
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "INTERNAL_ERROR",
                     *       "message": "An unexpected error occurred"
                     *     } */
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    cliHealthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Authentication valid */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheckResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "AUTH_004",
                     *       "message": "Unauthorized"
                     *     } */
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    upsyncData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PushRequest"];
            };
        };
        responses: {
            /** @description Data successfully synced */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PushResponse"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "VALIDATION_ERROR",
                     *       "message": "Validation failed",
                     *       "errors": {
                     *         "messages": "Required",
                     *         "entities": "Required"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            /** @description Unauthorized - Invalid or missing API key */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "UNAUTHORIZED",
                     *       "message": "Invalid API key"
                     *     } */
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden - Cannot update data for other machines */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "FORBIDDEN",
                     *       "message": "Cannot update data for other machines"
                     *     } */
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "syncId": "550e8400-e29b-41d4-a716-446655440000",
                     *       "results": {
                     *         "persisted": {
                     *           "count": 0,
                     *           "messageIds": []
                     *         },
                     *         "deduplicated": {
                     *           "count": 0,
                     *           "messageIds": []
                     *         },
                     *         "failed": {
                     *           "count": 1,
                     *           "details": [
                     *             {
                     *               "messageId": "chatcmpl-123abc",
                     *               "error": "Database connection failed",
                     *               "code": "SYNC_002"
                     *             }
                     *           ]
                     *         }
                     *       },
                     *       "summary": {
                     *         "totalMessages": 1,
                     *         "messagesSucceeded": 0,
                     *         "messagesFailed": 1,
                     *         "processingTimeMs": 45
                     *       }
                     *     } */
                    "application/json": components["schemas"]["PushResponse"];
                };
            };
        };
    };
    listApiKeys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of API keys */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getApiKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API key ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API key details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description API key not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateApiKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API key ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiKeyUpdateRequest"];
            };
        };
        responses: {
            /** @description API key updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyResponse"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description API key not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteApiKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API key ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API key deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "success": true,
                     *       "message": "API key deleted successfully"
                     *     } */
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description API key not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
