
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Machine
 * 
 */
export type Machine = $Result.DefaultSelection<Prisma.$MachinePayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model FileStatus
 * 
 */
export type FileStatus = $Result.DefaultSelection<Prisma.$FileStatusPayload>
/**
 * Model SyncStatus
 * 
 */
export type SyncStatus = $Result.DefaultSelection<Prisma.$SyncStatusPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.machine`: Exposes CRUD operations for the **Machine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Machines
    * const machines = await prisma.machine.findMany()
    * ```
    */
  get machine(): Prisma.MachineDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fileStatus`: Exposes CRUD operations for the **FileStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FileStatuses
    * const fileStatuses = await prisma.fileStatus.findMany()
    * ```
    */
  get fileStatus(): Prisma.FileStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.syncStatus`: Exposes CRUD operations for the **SyncStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SyncStatuses
    * const syncStatuses = await prisma.syncStatus.findMany()
    * ```
    */
  get syncStatus(): Prisma.SyncStatusDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Machine: 'Machine',
    Project: 'Project',
    Session: 'Session',
    Message: 'Message',
    FileStatus: 'FileStatus',
    SyncStatus: 'SyncStatus'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "machine" | "project" | "session" | "message" | "fileStatus" | "syncStatus"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Machine: {
        payload: Prisma.$MachinePayload<ExtArgs>
        fields: Prisma.MachineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MachineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MachineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>
          }
          findFirst: {
            args: Prisma.MachineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MachineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>
          }
          findMany: {
            args: Prisma.MachineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>[]
          }
          create: {
            args: Prisma.MachineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>
          }
          createMany: {
            args: Prisma.MachineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MachineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>[]
          }
          delete: {
            args: Prisma.MachineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>
          }
          update: {
            args: Prisma.MachineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>
          }
          deleteMany: {
            args: Prisma.MachineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MachineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MachineUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>[]
          }
          upsert: {
            args: Prisma.MachineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MachinePayload>
          }
          aggregate: {
            args: Prisma.MachineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMachine>
          }
          groupBy: {
            args: Prisma.MachineGroupByArgs<ExtArgs>
            result: $Utils.Optional<MachineGroupByOutputType>[]
          }
          count: {
            args: Prisma.MachineCountArgs<ExtArgs>
            result: $Utils.Optional<MachineCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      FileStatus: {
        payload: Prisma.$FileStatusPayload<ExtArgs>
        fields: Prisma.FileStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStatusPayload>
          }
          findFirst: {
            args: Prisma.FileStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStatusPayload>
          }
          findMany: {
            args: Prisma.FileStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStatusPayload>[]
          }
          create: {
            args: Prisma.FileStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStatusPayload>
          }
          createMany: {
            args: Prisma.FileStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileStatusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStatusPayload>[]
          }
          delete: {
            args: Prisma.FileStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStatusPayload>
          }
          update: {
            args: Prisma.FileStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStatusPayload>
          }
          deleteMany: {
            args: Prisma.FileStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileStatusUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStatusPayload>[]
          }
          upsert: {
            args: Prisma.FileStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileStatusPayload>
          }
          aggregate: {
            args: Prisma.FileStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFileStatus>
          }
          groupBy: {
            args: Prisma.FileStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileStatusCountArgs<ExtArgs>
            result: $Utils.Optional<FileStatusCountAggregateOutputType> | number
          }
        }
      }
      SyncStatus: {
        payload: Prisma.$SyncStatusPayload<ExtArgs>
        fields: Prisma.SyncStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SyncStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SyncStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncStatusPayload>
          }
          findFirst: {
            args: Prisma.SyncStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SyncStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncStatusPayload>
          }
          findMany: {
            args: Prisma.SyncStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncStatusPayload>[]
          }
          create: {
            args: Prisma.SyncStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncStatusPayload>
          }
          createMany: {
            args: Prisma.SyncStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SyncStatusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncStatusPayload>[]
          }
          delete: {
            args: Prisma.SyncStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncStatusPayload>
          }
          update: {
            args: Prisma.SyncStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncStatusPayload>
          }
          deleteMany: {
            args: Prisma.SyncStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SyncStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SyncStatusUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncStatusPayload>[]
          }
          upsert: {
            args: Prisma.SyncStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncStatusPayload>
          }
          aggregate: {
            args: Prisma.SyncStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSyncStatus>
          }
          groupBy: {
            args: Prisma.SyncStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<SyncStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.SyncStatusCountArgs<ExtArgs>
            result: $Utils.Optional<SyncStatusCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    machine?: MachineOmit
    project?: ProjectOmit
    session?: SessionOmit
    message?: MessageOmit
    fileStatus?: FileStatusOmit
    syncStatus?: SyncStatusOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    machines: number
    projects: number
    sessions: number
    messages: number
    fileStatus: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    machines?: boolean | UserCountOutputTypeCountMachinesArgs
    projects?: boolean | UserCountOutputTypeCountProjectsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    messages?: boolean | UserCountOutputTypeCountMessagesArgs
    fileStatus?: boolean | UserCountOutputTypeCountFileStatusArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMachinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MachineWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFileStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileStatusWhereInput
  }


  /**
   * Count Type MachineCountOutputType
   */

  export type MachineCountOutputType = {
    projects: number
    sessions: number
    messages: number
  }

  export type MachineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | MachineCountOutputTypeCountProjectsArgs
    sessions?: boolean | MachineCountOutputTypeCountSessionsArgs
    messages?: boolean | MachineCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * MachineCountOutputType without action
   */
  export type MachineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MachineCountOutputType
     */
    select?: MachineCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MachineCountOutputType without action
   */
  export type MachineCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * MachineCountOutputType without action
   */
  export type MachineCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * MachineCountOutputType without action
   */
  export type MachineCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    sessions: number
    messages: number
    fileStatus: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | ProjectCountOutputTypeCountSessionsArgs
    messages?: boolean | ProjectCountOutputTypeCountMessagesArgs
    fileStatus?: boolean | ProjectCountOutputTypeCountFileStatusArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountFileStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileStatusWhereInput
  }


  /**
   * Count Type SessionCountOutputType
   */

  export type SessionCountOutputType = {
    messages: number
    fileStatus: number
  }

  export type SessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | SessionCountOutputTypeCountMessagesArgs
    fileStatus?: boolean | SessionCountOutputTypeCountFileStatusArgs
  }

  // Custom InputTypes
  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCountOutputType
     */
    select?: SessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountFileStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileStatusWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    totalProjects: number | null
    totalSessions: number | null
    totalMessages: number | null
    totalCost: Decimal | null
    totalInputTokens: number | null
    totalOutputTokens: number | null
    totalCacheCreationTokens: number | null
    totalCacheReadTokens: number | null
  }

  export type UserSumAggregateOutputType = {
    totalProjects: number | null
    totalSessions: number | null
    totalMessages: bigint | null
    totalCost: Decimal | null
    totalInputTokens: bigint | null
    totalOutputTokens: bigint | null
    totalCacheCreationTokens: bigint | null
    totalCacheReadTokens: bigint | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    createdAt: Date | null
    updatedAt: Date | null
    totalProjects: number | null
    totalSessions: number | null
    totalMessages: bigint | null
    totalCost: Decimal | null
    totalInputTokens: bigint | null
    totalOutputTokens: bigint | null
    totalCacheCreationTokens: bigint | null
    totalCacheReadTokens: bigint | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    createdAt: Date | null
    updatedAt: Date | null
    totalProjects: number | null
    totalSessions: number | null
    totalMessages: bigint | null
    totalCost: Decimal | null
    totalInputTokens: bigint | null
    totalOutputTokens: bigint | null
    totalCacheCreationTokens: bigint | null
    totalCacheReadTokens: bigint | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    createdAt: number
    updatedAt: number
    totalProjects: number
    totalSessions: number
    totalMessages: number
    totalCost: number
    totalInputTokens: number
    totalOutputTokens: number
    totalCacheCreationTokens: number
    totalCacheReadTokens: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    totalProjects?: true
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type UserSumAggregateInputType = {
    totalProjects?: true
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    createdAt?: true
    updatedAt?: true
    totalProjects?: true
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    createdAt?: true
    updatedAt?: true
    totalProjects?: true
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    createdAt?: true
    updatedAt?: true
    totalProjects?: true
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string | null
    username: string | null
    createdAt: Date
    updatedAt: Date
    totalProjects: number
    totalSessions: number
    totalMessages: bigint
    totalCost: Decimal
    totalInputTokens: bigint
    totalOutputTokens: bigint
    totalCacheCreationTokens: bigint
    totalCacheReadTokens: bigint
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalProjects?: boolean
    totalSessions?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
    machines?: boolean | User$machinesArgs<ExtArgs>
    projects?: boolean | User$projectsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    fileStatus?: boolean | User$fileStatusArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalProjects?: boolean
    totalSessions?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalProjects?: boolean
    totalSessions?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalProjects?: boolean
    totalSessions?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "username" | "createdAt" | "updatedAt" | "totalProjects" | "totalSessions" | "totalMessages" | "totalCost" | "totalInputTokens" | "totalOutputTokens" | "totalCacheCreationTokens" | "totalCacheReadTokens", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    machines?: boolean | User$machinesArgs<ExtArgs>
    projects?: boolean | User$projectsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    fileStatus?: boolean | User$fileStatusArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      machines: Prisma.$MachinePayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      fileStatus: Prisma.$FileStatusPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string | null
      username: string | null
      createdAt: Date
      updatedAt: Date
      totalProjects: number
      totalSessions: number
      totalMessages: bigint
      totalCost: Prisma.Decimal
      totalInputTokens: bigint
      totalOutputTokens: bigint
      totalCacheCreationTokens: bigint
      totalCacheReadTokens: bigint
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    machines<T extends User$machinesArgs<ExtArgs> = {}>(args?: Subset<T, User$machinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projects<T extends User$projectsArgs<ExtArgs> = {}>(args?: Subset<T, User$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messages<T extends User$messagesArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    fileStatus<T extends User$fileStatusArgs<ExtArgs> = {}>(args?: Subset<T, User$fileStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly totalProjects: FieldRef<"User", 'Int'>
    readonly totalSessions: FieldRef<"User", 'Int'>
    readonly totalMessages: FieldRef<"User", 'BigInt'>
    readonly totalCost: FieldRef<"User", 'Decimal'>
    readonly totalInputTokens: FieldRef<"User", 'BigInt'>
    readonly totalOutputTokens: FieldRef<"User", 'BigInt'>
    readonly totalCacheCreationTokens: FieldRef<"User", 'BigInt'>
    readonly totalCacheReadTokens: FieldRef<"User", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.machines
   */
  export type User$machinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Machine
     */
    omit?: MachineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    where?: MachineWhereInput
    orderBy?: MachineOrderByWithRelationInput | MachineOrderByWithRelationInput[]
    cursor?: MachineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MachineScalarFieldEnum | MachineScalarFieldEnum[]
  }

  /**
   * User.projects
   */
  export type User$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.messages
   */
  export type User$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.fileStatus
   */
  export type User$fileStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusInclude<ExtArgs> | null
    where?: FileStatusWhereInput
    orderBy?: FileStatusOrderByWithRelationInput | FileStatusOrderByWithRelationInput[]
    cursor?: FileStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileStatusScalarFieldEnum | FileStatusScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Machine
   */

  export type AggregateMachine = {
    _count: MachineCountAggregateOutputType | null
    _avg: MachineAvgAggregateOutputType | null
    _sum: MachineSumAggregateOutputType | null
    _min: MachineMinAggregateOutputType | null
    _max: MachineMaxAggregateOutputType | null
  }

  export type MachineAvgAggregateOutputType = {
    totalProjects: number | null
    totalSessions: number | null
    totalMessages: number | null
    totalCost: Decimal | null
    totalInputTokens: number | null
    totalOutputTokens: number | null
    totalCacheCreationTokens: number | null
    totalCacheReadTokens: number | null
  }

  export type MachineSumAggregateOutputType = {
    totalProjects: number | null
    totalSessions: number | null
    totalMessages: bigint | null
    totalCost: Decimal | null
    totalInputTokens: bigint | null
    totalOutputTokens: bigint | null
    totalCacheCreationTokens: bigint | null
    totalCacheReadTokens: bigint | null
  }

  export type MachineMinAggregateOutputType = {
    id: string | null
    userId: string | null
    machineName: string | null
    osInfo: string | null
    createdAt: Date | null
    updatedAt: Date | null
    totalProjects: number | null
    totalSessions: number | null
    totalMessages: bigint | null
    totalCost: Decimal | null
    totalInputTokens: bigint | null
    totalOutputTokens: bigint | null
    totalCacheCreationTokens: bigint | null
    totalCacheReadTokens: bigint | null
  }

  export type MachineMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    machineName: string | null
    osInfo: string | null
    createdAt: Date | null
    updatedAt: Date | null
    totalProjects: number | null
    totalSessions: number | null
    totalMessages: bigint | null
    totalCost: Decimal | null
    totalInputTokens: bigint | null
    totalOutputTokens: bigint | null
    totalCacheCreationTokens: bigint | null
    totalCacheReadTokens: bigint | null
  }

  export type MachineCountAggregateOutputType = {
    id: number
    userId: number
    machineName: number
    osInfo: number
    createdAt: number
    updatedAt: number
    totalProjects: number
    totalSessions: number
    totalMessages: number
    totalCost: number
    totalInputTokens: number
    totalOutputTokens: number
    totalCacheCreationTokens: number
    totalCacheReadTokens: number
    _all: number
  }


  export type MachineAvgAggregateInputType = {
    totalProjects?: true
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type MachineSumAggregateInputType = {
    totalProjects?: true
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type MachineMinAggregateInputType = {
    id?: true
    userId?: true
    machineName?: true
    osInfo?: true
    createdAt?: true
    updatedAt?: true
    totalProjects?: true
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type MachineMaxAggregateInputType = {
    id?: true
    userId?: true
    machineName?: true
    osInfo?: true
    createdAt?: true
    updatedAt?: true
    totalProjects?: true
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type MachineCountAggregateInputType = {
    id?: true
    userId?: true
    machineName?: true
    osInfo?: true
    createdAt?: true
    updatedAt?: true
    totalProjects?: true
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
    _all?: true
  }

  export type MachineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Machine to aggregate.
     */
    where?: MachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Machines to fetch.
     */
    orderBy?: MachineOrderByWithRelationInput | MachineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Machines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Machines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Machines
    **/
    _count?: true | MachineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MachineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MachineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MachineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MachineMaxAggregateInputType
  }

  export type GetMachineAggregateType<T extends MachineAggregateArgs> = {
        [P in keyof T & keyof AggregateMachine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMachine[P]>
      : GetScalarType<T[P], AggregateMachine[P]>
  }




  export type MachineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MachineWhereInput
    orderBy?: MachineOrderByWithAggregationInput | MachineOrderByWithAggregationInput[]
    by: MachineScalarFieldEnum[] | MachineScalarFieldEnum
    having?: MachineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MachineCountAggregateInputType | true
    _avg?: MachineAvgAggregateInputType
    _sum?: MachineSumAggregateInputType
    _min?: MachineMinAggregateInputType
    _max?: MachineMaxAggregateInputType
  }

  export type MachineGroupByOutputType = {
    id: string
    userId: string
    machineName: string | null
    osInfo: string | null
    createdAt: Date
    updatedAt: Date
    totalProjects: number
    totalSessions: number
    totalMessages: bigint
    totalCost: Decimal
    totalInputTokens: bigint
    totalOutputTokens: bigint
    totalCacheCreationTokens: bigint
    totalCacheReadTokens: bigint
    _count: MachineCountAggregateOutputType | null
    _avg: MachineAvgAggregateOutputType | null
    _sum: MachineSumAggregateOutputType | null
    _min: MachineMinAggregateOutputType | null
    _max: MachineMaxAggregateOutputType | null
  }

  type GetMachineGroupByPayload<T extends MachineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MachineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MachineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MachineGroupByOutputType[P]>
            : GetScalarType<T[P], MachineGroupByOutputType[P]>
        }
      >
    >


  export type MachineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineName?: boolean
    osInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalProjects?: boolean
    totalSessions?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    projects?: boolean | Machine$projectsArgs<ExtArgs>
    sessions?: boolean | Machine$sessionsArgs<ExtArgs>
    messages?: boolean | Machine$messagesArgs<ExtArgs>
    _count?: boolean | MachineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["machine"]>

  export type MachineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineName?: boolean
    osInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalProjects?: boolean
    totalSessions?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["machine"]>

  export type MachineSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    machineName?: boolean
    osInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalProjects?: boolean
    totalSessions?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["machine"]>

  export type MachineSelectScalar = {
    id?: boolean
    userId?: boolean
    machineName?: boolean
    osInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalProjects?: boolean
    totalSessions?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
  }

  export type MachineOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "machineName" | "osInfo" | "createdAt" | "updatedAt" | "totalProjects" | "totalSessions" | "totalMessages" | "totalCost" | "totalInputTokens" | "totalOutputTokens" | "totalCacheCreationTokens" | "totalCacheReadTokens", ExtArgs["result"]["machine"]>
  export type MachineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    projects?: boolean | Machine$projectsArgs<ExtArgs>
    sessions?: boolean | Machine$sessionsArgs<ExtArgs>
    messages?: boolean | Machine$messagesArgs<ExtArgs>
    _count?: boolean | MachineCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MachineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MachineIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MachinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Machine"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      machineName: string | null
      osInfo: string | null
      createdAt: Date
      updatedAt: Date
      totalProjects: number
      totalSessions: number
      totalMessages: bigint
      totalCost: Prisma.Decimal
      totalInputTokens: bigint
      totalOutputTokens: bigint
      totalCacheCreationTokens: bigint
      totalCacheReadTokens: bigint
    }, ExtArgs["result"]["machine"]>
    composites: {}
  }

  type MachineGetPayload<S extends boolean | null | undefined | MachineDefaultArgs> = $Result.GetResult<Prisma.$MachinePayload, S>

  type MachineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MachineFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MachineCountAggregateInputType | true
    }

  export interface MachineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Machine'], meta: { name: 'Machine' } }
    /**
     * Find zero or one Machine that matches the filter.
     * @param {MachineFindUniqueArgs} args - Arguments to find a Machine
     * @example
     * // Get one Machine
     * const machine = await prisma.machine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MachineFindUniqueArgs>(args: SelectSubset<T, MachineFindUniqueArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Machine that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MachineFindUniqueOrThrowArgs} args - Arguments to find a Machine
     * @example
     * // Get one Machine
     * const machine = await prisma.machine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MachineFindUniqueOrThrowArgs>(args: SelectSubset<T, MachineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Machine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineFindFirstArgs} args - Arguments to find a Machine
     * @example
     * // Get one Machine
     * const machine = await prisma.machine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MachineFindFirstArgs>(args?: SelectSubset<T, MachineFindFirstArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Machine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineFindFirstOrThrowArgs} args - Arguments to find a Machine
     * @example
     * // Get one Machine
     * const machine = await prisma.machine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MachineFindFirstOrThrowArgs>(args?: SelectSubset<T, MachineFindFirstOrThrowArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Machines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Machines
     * const machines = await prisma.machine.findMany()
     * 
     * // Get first 10 Machines
     * const machines = await prisma.machine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const machineWithIdOnly = await prisma.machine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MachineFindManyArgs>(args?: SelectSubset<T, MachineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Machine.
     * @param {MachineCreateArgs} args - Arguments to create a Machine.
     * @example
     * // Create one Machine
     * const Machine = await prisma.machine.create({
     *   data: {
     *     // ... data to create a Machine
     *   }
     * })
     * 
     */
    create<T extends MachineCreateArgs>(args: SelectSubset<T, MachineCreateArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Machines.
     * @param {MachineCreateManyArgs} args - Arguments to create many Machines.
     * @example
     * // Create many Machines
     * const machine = await prisma.machine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MachineCreateManyArgs>(args?: SelectSubset<T, MachineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Machines and returns the data saved in the database.
     * @param {MachineCreateManyAndReturnArgs} args - Arguments to create many Machines.
     * @example
     * // Create many Machines
     * const machine = await prisma.machine.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Machines and only return the `id`
     * const machineWithIdOnly = await prisma.machine.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MachineCreateManyAndReturnArgs>(args?: SelectSubset<T, MachineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Machine.
     * @param {MachineDeleteArgs} args - Arguments to delete one Machine.
     * @example
     * // Delete one Machine
     * const Machine = await prisma.machine.delete({
     *   where: {
     *     // ... filter to delete one Machine
     *   }
     * })
     * 
     */
    delete<T extends MachineDeleteArgs>(args: SelectSubset<T, MachineDeleteArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Machine.
     * @param {MachineUpdateArgs} args - Arguments to update one Machine.
     * @example
     * // Update one Machine
     * const machine = await prisma.machine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MachineUpdateArgs>(args: SelectSubset<T, MachineUpdateArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Machines.
     * @param {MachineDeleteManyArgs} args - Arguments to filter Machines to delete.
     * @example
     * // Delete a few Machines
     * const { count } = await prisma.machine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MachineDeleteManyArgs>(args?: SelectSubset<T, MachineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Machines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Machines
     * const machine = await prisma.machine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MachineUpdateManyArgs>(args: SelectSubset<T, MachineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Machines and returns the data updated in the database.
     * @param {MachineUpdateManyAndReturnArgs} args - Arguments to update many Machines.
     * @example
     * // Update many Machines
     * const machine = await prisma.machine.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Machines and only return the `id`
     * const machineWithIdOnly = await prisma.machine.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MachineUpdateManyAndReturnArgs>(args: SelectSubset<T, MachineUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Machine.
     * @param {MachineUpsertArgs} args - Arguments to update or create a Machine.
     * @example
     * // Update or create a Machine
     * const machine = await prisma.machine.upsert({
     *   create: {
     *     // ... data to create a Machine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Machine we want to update
     *   }
     * })
     */
    upsert<T extends MachineUpsertArgs>(args: SelectSubset<T, MachineUpsertArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Machines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineCountArgs} args - Arguments to filter Machines to count.
     * @example
     * // Count the number of Machines
     * const count = await prisma.machine.count({
     *   where: {
     *     // ... the filter for the Machines we want to count
     *   }
     * })
    **/
    count<T extends MachineCountArgs>(
      args?: Subset<T, MachineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MachineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Machine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MachineAggregateArgs>(args: Subset<T, MachineAggregateArgs>): Prisma.PrismaPromise<GetMachineAggregateType<T>>

    /**
     * Group by Machine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MachineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MachineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MachineGroupByArgs['orderBy'] }
        : { orderBy?: MachineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MachineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMachineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Machine model
   */
  readonly fields: MachineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Machine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MachineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    projects<T extends Machine$projectsArgs<ExtArgs> = {}>(args?: Subset<T, Machine$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends Machine$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Machine$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messages<T extends Machine$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Machine$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Machine model
   */
  interface MachineFieldRefs {
    readonly id: FieldRef<"Machine", 'String'>
    readonly userId: FieldRef<"Machine", 'String'>
    readonly machineName: FieldRef<"Machine", 'String'>
    readonly osInfo: FieldRef<"Machine", 'String'>
    readonly createdAt: FieldRef<"Machine", 'DateTime'>
    readonly updatedAt: FieldRef<"Machine", 'DateTime'>
    readonly totalProjects: FieldRef<"Machine", 'Int'>
    readonly totalSessions: FieldRef<"Machine", 'Int'>
    readonly totalMessages: FieldRef<"Machine", 'BigInt'>
    readonly totalCost: FieldRef<"Machine", 'Decimal'>
    readonly totalInputTokens: FieldRef<"Machine", 'BigInt'>
    readonly totalOutputTokens: FieldRef<"Machine", 'BigInt'>
    readonly totalCacheCreationTokens: FieldRef<"Machine", 'BigInt'>
    readonly totalCacheReadTokens: FieldRef<"Machine", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * Machine findUnique
   */
  export type MachineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Machine
     */
    omit?: MachineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * Filter, which Machine to fetch.
     */
    where: MachineWhereUniqueInput
  }

  /**
   * Machine findUniqueOrThrow
   */
  export type MachineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Machine
     */
    omit?: MachineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * Filter, which Machine to fetch.
     */
    where: MachineWhereUniqueInput
  }

  /**
   * Machine findFirst
   */
  export type MachineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Machine
     */
    omit?: MachineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * Filter, which Machine to fetch.
     */
    where?: MachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Machines to fetch.
     */
    orderBy?: MachineOrderByWithRelationInput | MachineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Machines.
     */
    cursor?: MachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Machines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Machines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Machines.
     */
    distinct?: MachineScalarFieldEnum | MachineScalarFieldEnum[]
  }

  /**
   * Machine findFirstOrThrow
   */
  export type MachineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Machine
     */
    omit?: MachineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * Filter, which Machine to fetch.
     */
    where?: MachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Machines to fetch.
     */
    orderBy?: MachineOrderByWithRelationInput | MachineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Machines.
     */
    cursor?: MachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Machines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Machines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Machines.
     */
    distinct?: MachineScalarFieldEnum | MachineScalarFieldEnum[]
  }

  /**
   * Machine findMany
   */
  export type MachineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Machine
     */
    omit?: MachineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * Filter, which Machines to fetch.
     */
    where?: MachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Machines to fetch.
     */
    orderBy?: MachineOrderByWithRelationInput | MachineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Machines.
     */
    cursor?: MachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Machines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Machines.
     */
    skip?: number
    distinct?: MachineScalarFieldEnum | MachineScalarFieldEnum[]
  }

  /**
   * Machine create
   */
  export type MachineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Machine
     */
    omit?: MachineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * The data needed to create a Machine.
     */
    data: XOR<MachineCreateInput, MachineUncheckedCreateInput>
  }

  /**
   * Machine createMany
   */
  export type MachineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Machines.
     */
    data: MachineCreateManyInput | MachineCreateManyInput[]
  }

  /**
   * Machine createManyAndReturn
   */
  export type MachineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Machine
     */
    omit?: MachineOmit<ExtArgs> | null
    /**
     * The data used to create many Machines.
     */
    data: MachineCreateManyInput | MachineCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Machine update
   */
  export type MachineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Machine
     */
    omit?: MachineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * The data needed to update a Machine.
     */
    data: XOR<MachineUpdateInput, MachineUncheckedUpdateInput>
    /**
     * Choose, which Machine to update.
     */
    where: MachineWhereUniqueInput
  }

  /**
   * Machine updateMany
   */
  export type MachineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Machines.
     */
    data: XOR<MachineUpdateManyMutationInput, MachineUncheckedUpdateManyInput>
    /**
     * Filter which Machines to update
     */
    where?: MachineWhereInput
    /**
     * Limit how many Machines to update.
     */
    limit?: number
  }

  /**
   * Machine updateManyAndReturn
   */
  export type MachineUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Machine
     */
    omit?: MachineOmit<ExtArgs> | null
    /**
     * The data used to update Machines.
     */
    data: XOR<MachineUpdateManyMutationInput, MachineUncheckedUpdateManyInput>
    /**
     * Filter which Machines to update
     */
    where?: MachineWhereInput
    /**
     * Limit how many Machines to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Machine upsert
   */
  export type MachineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Machine
     */
    omit?: MachineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * The filter to search for the Machine to update in case it exists.
     */
    where: MachineWhereUniqueInput
    /**
     * In case the Machine found by the `where` argument doesn't exist, create a new Machine with this data.
     */
    create: XOR<MachineCreateInput, MachineUncheckedCreateInput>
    /**
     * In case the Machine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MachineUpdateInput, MachineUncheckedUpdateInput>
  }

  /**
   * Machine delete
   */
  export type MachineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Machine
     */
    omit?: MachineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
    /**
     * Filter which Machine to delete.
     */
    where: MachineWhereUniqueInput
  }

  /**
   * Machine deleteMany
   */
  export type MachineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Machines to delete
     */
    where?: MachineWhereInput
    /**
     * Limit how many Machines to delete.
     */
    limit?: number
  }

  /**
   * Machine.projects
   */
  export type Machine$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Machine.sessions
   */
  export type Machine$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Machine.messages
   */
  export type Machine$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Machine without action
   */
  export type MachineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Machine
     */
    select?: MachineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Machine
     */
    omit?: MachineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MachineInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    totalSessions: number | null
    totalMessages: number | null
    totalCost: Decimal | null
    totalInputTokens: number | null
    totalOutputTokens: number | null
    totalCacheCreationTokens: number | null
    totalCacheReadTokens: number | null
  }

  export type ProjectSumAggregateOutputType = {
    totalSessions: number | null
    totalMessages: bigint | null
    totalCost: Decimal | null
    totalInputTokens: bigint | null
    totalOutputTokens: bigint | null
    totalCacheCreationTokens: bigint | null
    totalCacheReadTokens: bigint | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    projectName: string | null
    userId: string | null
    clientMachineId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    totalSessions: number | null
    totalMessages: bigint | null
    totalCost: Decimal | null
    totalInputTokens: bigint | null
    totalOutputTokens: bigint | null
    totalCacheCreationTokens: bigint | null
    totalCacheReadTokens: bigint | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    projectName: string | null
    userId: string | null
    clientMachineId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    totalSessions: number | null
    totalMessages: bigint | null
    totalCost: Decimal | null
    totalInputTokens: bigint | null
    totalOutputTokens: bigint | null
    totalCacheCreationTokens: bigint | null
    totalCacheReadTokens: bigint | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    projectName: number
    userId: number
    clientMachineId: number
    createdAt: number
    updatedAt: number
    totalSessions: number
    totalMessages: number
    totalCost: number
    totalInputTokens: number
    totalOutputTokens: number
    totalCacheCreationTokens: number
    totalCacheReadTokens: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type ProjectSumAggregateInputType = {
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    projectName?: true
    userId?: true
    clientMachineId?: true
    createdAt?: true
    updatedAt?: true
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    projectName?: true
    userId?: true
    clientMachineId?: true
    createdAt?: true
    updatedAt?: true
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    projectName?: true
    userId?: true
    clientMachineId?: true
    createdAt?: true
    updatedAt?: true
    totalSessions?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    projectName: string
    userId: string
    clientMachineId: string
    createdAt: Date
    updatedAt: Date
    totalSessions: number
    totalMessages: bigint
    totalCost: Decimal
    totalInputTokens: bigint
    totalOutputTokens: bigint
    totalCacheCreationTokens: bigint
    totalCacheReadTokens: bigint
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectName?: boolean
    userId?: boolean
    clientMachineId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalSessions?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
    sessions?: boolean | Project$sessionsArgs<ExtArgs>
    messages?: boolean | Project$messagesArgs<ExtArgs>
    fileStatus?: boolean | Project$fileStatusArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectName?: boolean
    userId?: boolean
    clientMachineId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalSessions?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectName?: boolean
    userId?: boolean
    clientMachineId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalSessions?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    projectName?: boolean
    userId?: boolean
    clientMachineId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalSessions?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
  }

  export type ProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectName" | "userId" | "clientMachineId" | "createdAt" | "updatedAt" | "totalSessions" | "totalMessages" | "totalCost" | "totalInputTokens" | "totalOutputTokens" | "totalCacheCreationTokens" | "totalCacheReadTokens", ExtArgs["result"]["project"]>
  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
    sessions?: boolean | Project$sessionsArgs<ExtArgs>
    messages?: boolean | Project$messagesArgs<ExtArgs>
    fileStatus?: boolean | Project$fileStatusArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      machine: Prisma.$MachinePayload<ExtArgs>
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      fileStatus: Prisma.$FileStatusPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectName: string
      userId: string
      clientMachineId: string
      createdAt: Date
      updatedAt: Date
      totalSessions: number
      totalMessages: bigint
      totalCost: Prisma.Decimal
      totalInputTokens: bigint
      totalOutputTokens: bigint
      totalCacheCreationTokens: bigint
      totalCacheReadTokens: bigint
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects and returns the data updated in the database.
     * @param {ProjectUpdateManyAndReturnArgs} args - Arguments to update many Projects.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    machine<T extends MachineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MachineDefaultArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sessions<T extends Project$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Project$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messages<T extends Project$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Project$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    fileStatus<T extends Project$fileStatusArgs<ExtArgs> = {}>(args?: Subset<T, Project$fileStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly projectName: FieldRef<"Project", 'String'>
    readonly userId: FieldRef<"Project", 'String'>
    readonly clientMachineId: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
    readonly totalSessions: FieldRef<"Project", 'Int'>
    readonly totalMessages: FieldRef<"Project", 'BigInt'>
    readonly totalCost: FieldRef<"Project", 'Decimal'>
    readonly totalInputTokens: FieldRef<"Project", 'BigInt'>
    readonly totalOutputTokens: FieldRef<"Project", 'BigInt'>
    readonly totalCacheCreationTokens: FieldRef<"Project", 'BigInt'>
    readonly totalCacheReadTokens: FieldRef<"Project", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project updateManyAndReturn
   */
  export type ProjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Project.sessions
   */
  export type Project$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Project.messages
   */
  export type Project$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Project.fileStatus
   */
  export type Project$fileStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusInclude<ExtArgs> | null
    where?: FileStatusWhereInput
    orderBy?: FileStatusOrderByWithRelationInput | FileStatusOrderByWithRelationInput[]
    cursor?: FileStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileStatusScalarFieldEnum | FileStatusScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    totalMessages: number | null
    totalCost: Decimal | null
    totalInputTokens: number | null
    totalOutputTokens: number | null
    totalCacheCreationTokens: number | null
    totalCacheReadTokens: number | null
  }

  export type SessionSumAggregateOutputType = {
    totalMessages: bigint | null
    totalCost: Decimal | null
    totalInputTokens: bigint | null
    totalOutputTokens: bigint | null
    totalCacheCreationTokens: bigint | null
    totalCacheReadTokens: bigint | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    userId: string | null
    clientMachineId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    totalMessages: bigint | null
    totalCost: Decimal | null
    totalInputTokens: bigint | null
    totalOutputTokens: bigint | null
    totalCacheCreationTokens: bigint | null
    totalCacheReadTokens: bigint | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    userId: string | null
    clientMachineId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    totalMessages: bigint | null
    totalCost: Decimal | null
    totalInputTokens: bigint | null
    totalOutputTokens: bigint | null
    totalCacheCreationTokens: bigint | null
    totalCacheReadTokens: bigint | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    projectId: number
    userId: number
    clientMachineId: number
    createdAt: number
    updatedAt: number
    totalMessages: number
    totalCost: number
    totalInputTokens: number
    totalOutputTokens: number
    totalCacheCreationTokens: number
    totalCacheReadTokens: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type SessionSumAggregateInputType = {
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    clientMachineId?: true
    createdAt?: true
    updatedAt?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    clientMachineId?: true
    createdAt?: true
    updatedAt?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    clientMachineId?: true
    createdAt?: true
    updatedAt?: true
    totalMessages?: true
    totalCost?: true
    totalInputTokens?: true
    totalOutputTokens?: true
    totalCacheCreationTokens?: true
    totalCacheReadTokens?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    projectId: string
    userId: string
    clientMachineId: string
    createdAt: Date
    updatedAt: Date
    totalMessages: bigint
    totalCost: Decimal
    totalInputTokens: bigint
    totalOutputTokens: bigint
    totalCacheCreationTokens: bigint
    totalCacheReadTokens: bigint
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    userId?: boolean
    clientMachineId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
    messages?: boolean | Session$messagesArgs<ExtArgs>
    fileStatus?: boolean | Session$fileStatusArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    userId?: boolean
    clientMachineId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    userId?: boolean
    clientMachineId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    projectId?: boolean
    userId?: boolean
    clientMachineId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalMessages?: boolean
    totalCost?: boolean
    totalInputTokens?: boolean
    totalOutputTokens?: boolean
    totalCacheCreationTokens?: boolean
    totalCacheReadTokens?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "userId" | "clientMachineId" | "createdAt" | "updatedAt" | "totalMessages" | "totalCost" | "totalInputTokens" | "totalOutputTokens" | "totalCacheCreationTokens" | "totalCacheReadTokens", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
    messages?: boolean | Session$messagesArgs<ExtArgs>
    fileStatus?: boolean | Session$fileStatusArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      machine: Prisma.$MachinePayload<ExtArgs>
      messages: Prisma.$MessagePayload<ExtArgs>[]
      fileStatus: Prisma.$FileStatusPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      userId: string
      clientMachineId: string
      createdAt: Date
      updatedAt: Date
      totalMessages: bigint
      totalCost: Prisma.Decimal
      totalInputTokens: bigint
      totalOutputTokens: bigint
      totalCacheCreationTokens: bigint
      totalCacheReadTokens: bigint
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    machine<T extends MachineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MachineDefaultArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    messages<T extends Session$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Session$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    fileStatus<T extends Session$fileStatusArgs<ExtArgs> = {}>(args?: Subset<T, Session$fileStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly projectId: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly clientMachineId: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
    readonly totalMessages: FieldRef<"Session", 'BigInt'>
    readonly totalCost: FieldRef<"Session", 'Decimal'>
    readonly totalInputTokens: FieldRef<"Session", 'BigInt'>
    readonly totalOutputTokens: FieldRef<"Session", 'BigInt'>
    readonly totalCacheCreationTokens: FieldRef<"Session", 'BigInt'>
    readonly totalCacheReadTokens: FieldRef<"Session", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session.messages
   */
  export type Session$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Session.fileStatus
   */
  export type Session$fileStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusInclude<ExtArgs> | null
    where?: FileStatusWhereInput
    orderBy?: FileStatusOrderByWithRelationInput | FileStatusOrderByWithRelationInput[]
    cursor?: FileStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileStatusScalarFieldEnum | FileStatusScalarFieldEnum[]
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    inputTokens: number | null
    outputTokens: number | null
    cacheCreationTokens: number | null
    cacheReadTokens: number | null
    pricePerInputToken: Decimal | null
    pricePerOutputToken: Decimal | null
    pricePerCacheWriteToken: Decimal | null
    pricePerCacheReadToken: Decimal | null
    cacheDurationMinutes: number | null
    messageCost: Decimal | null
  }

  export type MessageSumAggregateOutputType = {
    inputTokens: bigint | null
    outputTokens: bigint | null
    cacheCreationTokens: bigint | null
    cacheReadTokens: bigint | null
    pricePerInputToken: Decimal | null
    pricePerOutputToken: Decimal | null
    pricePerCacheWriteToken: Decimal | null
    pricePerCacheReadToken: Decimal | null
    cacheDurationMinutes: number | null
    messageCost: Decimal | null
  }

  export type MessageMinAggregateOutputType = {
    uuid: string | null
    messageId: string | null
    requestId: string | null
    sessionId: string | null
    projectId: string | null
    userId: string | null
    clientMachineId: string | null
    timestamp: Date | null
    role: string | null
    model: string | null
    type: string | null
    inputTokens: bigint | null
    outputTokens: bigint | null
    cacheCreationTokens: bigint | null
    cacheReadTokens: bigint | null
    pricePerInputToken: Decimal | null
    pricePerOutputToken: Decimal | null
    pricePerCacheWriteToken: Decimal | null
    pricePerCacheReadToken: Decimal | null
    cacheDurationMinutes: number | null
    messageCost: Decimal | null
  }

  export type MessageMaxAggregateOutputType = {
    uuid: string | null
    messageId: string | null
    requestId: string | null
    sessionId: string | null
    projectId: string | null
    userId: string | null
    clientMachineId: string | null
    timestamp: Date | null
    role: string | null
    model: string | null
    type: string | null
    inputTokens: bigint | null
    outputTokens: bigint | null
    cacheCreationTokens: bigint | null
    cacheReadTokens: bigint | null
    pricePerInputToken: Decimal | null
    pricePerOutputToken: Decimal | null
    pricePerCacheWriteToken: Decimal | null
    pricePerCacheReadToken: Decimal | null
    cacheDurationMinutes: number | null
    messageCost: Decimal | null
  }

  export type MessageCountAggregateOutputType = {
    uuid: number
    messageId: number
    requestId: number
    sessionId: number
    projectId: number
    userId: number
    clientMachineId: number
    timestamp: number
    role: number
    model: number
    type: number
    inputTokens: number
    outputTokens: number
    cacheCreationTokens: number
    cacheReadTokens: number
    pricePerInputToken: number
    pricePerOutputToken: number
    pricePerCacheWriteToken: number
    pricePerCacheReadToken: number
    cacheDurationMinutes: number
    messageCost: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    inputTokens?: true
    outputTokens?: true
    cacheCreationTokens?: true
    cacheReadTokens?: true
    pricePerInputToken?: true
    pricePerOutputToken?: true
    pricePerCacheWriteToken?: true
    pricePerCacheReadToken?: true
    cacheDurationMinutes?: true
    messageCost?: true
  }

  export type MessageSumAggregateInputType = {
    inputTokens?: true
    outputTokens?: true
    cacheCreationTokens?: true
    cacheReadTokens?: true
    pricePerInputToken?: true
    pricePerOutputToken?: true
    pricePerCacheWriteToken?: true
    pricePerCacheReadToken?: true
    cacheDurationMinutes?: true
    messageCost?: true
  }

  export type MessageMinAggregateInputType = {
    uuid?: true
    messageId?: true
    requestId?: true
    sessionId?: true
    projectId?: true
    userId?: true
    clientMachineId?: true
    timestamp?: true
    role?: true
    model?: true
    type?: true
    inputTokens?: true
    outputTokens?: true
    cacheCreationTokens?: true
    cacheReadTokens?: true
    pricePerInputToken?: true
    pricePerOutputToken?: true
    pricePerCacheWriteToken?: true
    pricePerCacheReadToken?: true
    cacheDurationMinutes?: true
    messageCost?: true
  }

  export type MessageMaxAggregateInputType = {
    uuid?: true
    messageId?: true
    requestId?: true
    sessionId?: true
    projectId?: true
    userId?: true
    clientMachineId?: true
    timestamp?: true
    role?: true
    model?: true
    type?: true
    inputTokens?: true
    outputTokens?: true
    cacheCreationTokens?: true
    cacheReadTokens?: true
    pricePerInputToken?: true
    pricePerOutputToken?: true
    pricePerCacheWriteToken?: true
    pricePerCacheReadToken?: true
    cacheDurationMinutes?: true
    messageCost?: true
  }

  export type MessageCountAggregateInputType = {
    uuid?: true
    messageId?: true
    requestId?: true
    sessionId?: true
    projectId?: true
    userId?: true
    clientMachineId?: true
    timestamp?: true
    role?: true
    model?: true
    type?: true
    inputTokens?: true
    outputTokens?: true
    cacheCreationTokens?: true
    cacheReadTokens?: true
    pricePerInputToken?: true
    pricePerOutputToken?: true
    pricePerCacheWriteToken?: true
    pricePerCacheReadToken?: true
    cacheDurationMinutes?: true
    messageCost?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    uuid: string
    messageId: string
    requestId: string | null
    sessionId: string
    projectId: string
    userId: string
    clientMachineId: string
    timestamp: Date | null
    role: string
    model: string | null
    type: string | null
    inputTokens: bigint
    outputTokens: bigint
    cacheCreationTokens: bigint
    cacheReadTokens: bigint
    pricePerInputToken: Decimal | null
    pricePerOutputToken: Decimal | null
    pricePerCacheWriteToken: Decimal | null
    pricePerCacheReadToken: Decimal | null
    cacheDurationMinutes: number | null
    messageCost: Decimal
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uuid?: boolean
    messageId?: boolean
    requestId?: boolean
    sessionId?: boolean
    projectId?: boolean
    userId?: boolean
    clientMachineId?: boolean
    timestamp?: boolean
    role?: boolean
    model?: boolean
    type?: boolean
    inputTokens?: boolean
    outputTokens?: boolean
    cacheCreationTokens?: boolean
    cacheReadTokens?: boolean
    pricePerInputToken?: boolean
    pricePerOutputToken?: boolean
    pricePerCacheWriteToken?: boolean
    pricePerCacheReadToken?: boolean
    cacheDurationMinutes?: boolean
    messageCost?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uuid?: boolean
    messageId?: boolean
    requestId?: boolean
    sessionId?: boolean
    projectId?: boolean
    userId?: boolean
    clientMachineId?: boolean
    timestamp?: boolean
    role?: boolean
    model?: boolean
    type?: boolean
    inputTokens?: boolean
    outputTokens?: boolean
    cacheCreationTokens?: boolean
    cacheReadTokens?: boolean
    pricePerInputToken?: boolean
    pricePerOutputToken?: boolean
    pricePerCacheWriteToken?: boolean
    pricePerCacheReadToken?: boolean
    cacheDurationMinutes?: boolean
    messageCost?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uuid?: boolean
    messageId?: boolean
    requestId?: boolean
    sessionId?: boolean
    projectId?: boolean
    userId?: boolean
    clientMachineId?: boolean
    timestamp?: boolean
    role?: boolean
    model?: boolean
    type?: boolean
    inputTokens?: boolean
    outputTokens?: boolean
    cacheCreationTokens?: boolean
    cacheReadTokens?: boolean
    pricePerInputToken?: boolean
    pricePerOutputToken?: boolean
    pricePerCacheWriteToken?: boolean
    pricePerCacheReadToken?: boolean
    cacheDurationMinutes?: boolean
    messageCost?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    uuid?: boolean
    messageId?: boolean
    requestId?: boolean
    sessionId?: boolean
    projectId?: boolean
    userId?: boolean
    clientMachineId?: boolean
    timestamp?: boolean
    role?: boolean
    model?: boolean
    type?: boolean
    inputTokens?: boolean
    outputTokens?: boolean
    cacheCreationTokens?: boolean
    cacheReadTokens?: boolean
    pricePerInputToken?: boolean
    pricePerOutputToken?: boolean
    pricePerCacheWriteToken?: boolean
    pricePerCacheReadToken?: boolean
    cacheDurationMinutes?: boolean
    messageCost?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"uuid" | "messageId" | "requestId" | "sessionId" | "projectId" | "userId" | "clientMachineId" | "timestamp" | "role" | "model" | "type" | "inputTokens" | "outputTokens" | "cacheCreationTokens" | "cacheReadTokens" | "pricePerInputToken" | "pricePerOutputToken" | "pricePerCacheWriteToken" | "pricePerCacheReadToken" | "cacheDurationMinutes" | "messageCost", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    machine?: boolean | MachineDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      session: Prisma.$SessionPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      machine: Prisma.$MachinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      uuid: string
      messageId: string
      requestId: string | null
      sessionId: string
      projectId: string
      userId: string
      clientMachineId: string
      timestamp: Date | null
      role: string
      model: string | null
      type: string | null
      inputTokens: bigint
      outputTokens: bigint
      cacheCreationTokens: bigint
      cacheReadTokens: bigint
      pricePerInputToken: Prisma.Decimal | null
      pricePerOutputToken: Prisma.Decimal | null
      pricePerCacheWriteToken: Prisma.Decimal | null
      pricePerCacheReadToken: Prisma.Decimal | null
      cacheDurationMinutes: number | null
      messageCost: Prisma.Decimal
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const messageWithUuidOnly = await prisma.message.findMany({ select: { uuid: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `uuid`
     * const messageWithUuidOnly = await prisma.message.createManyAndReturn({
     *   select: { uuid: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `uuid`
     * const messageWithUuidOnly = await prisma.message.updateManyAndReturn({
     *   select: { uuid: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends SessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionDefaultArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    machine<T extends MachineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MachineDefaultArgs<ExtArgs>>): Prisma__MachineClient<$Result.GetResult<Prisma.$MachinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly uuid: FieldRef<"Message", 'String'>
    readonly messageId: FieldRef<"Message", 'String'>
    readonly requestId: FieldRef<"Message", 'String'>
    readonly sessionId: FieldRef<"Message", 'String'>
    readonly projectId: FieldRef<"Message", 'String'>
    readonly userId: FieldRef<"Message", 'String'>
    readonly clientMachineId: FieldRef<"Message", 'String'>
    readonly timestamp: FieldRef<"Message", 'DateTime'>
    readonly role: FieldRef<"Message", 'String'>
    readonly model: FieldRef<"Message", 'String'>
    readonly type: FieldRef<"Message", 'String'>
    readonly inputTokens: FieldRef<"Message", 'BigInt'>
    readonly outputTokens: FieldRef<"Message", 'BigInt'>
    readonly cacheCreationTokens: FieldRef<"Message", 'BigInt'>
    readonly cacheReadTokens: FieldRef<"Message", 'BigInt'>
    readonly pricePerInputToken: FieldRef<"Message", 'Decimal'>
    readonly pricePerOutputToken: FieldRef<"Message", 'Decimal'>
    readonly pricePerCacheWriteToken: FieldRef<"Message", 'Decimal'>
    readonly pricePerCacheReadToken: FieldRef<"Message", 'Decimal'>
    readonly cacheDurationMinutes: FieldRef<"Message", 'Int'>
    readonly messageCost: FieldRef<"Message", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model FileStatus
   */

  export type AggregateFileStatus = {
    _count: FileStatusCountAggregateOutputType | null
    _avg: FileStatusAvgAggregateOutputType | null
    _sum: FileStatusSumAggregateOutputType | null
    _min: FileStatusMinAggregateOutputType | null
    _max: FileStatusMaxAggregateOutputType | null
  }

  export type FileStatusAvgAggregateOutputType = {
    fileSize: number | null
    lastProcessedLine: number | null
  }

  export type FileStatusSumAggregateOutputType = {
    fileSize: bigint | null
    lastProcessedLine: bigint | null
  }

  export type FileStatusMinAggregateOutputType = {
    filePath: string | null
    projectId: string | null
    sessionId: string | null
    userId: string | null
    fileSize: bigint | null
    lastModified: Date | null
    lastProcessedLine: bigint | null
    lastProcessedAt: Date | null
    checksum: string | null
  }

  export type FileStatusMaxAggregateOutputType = {
    filePath: string | null
    projectId: string | null
    sessionId: string | null
    userId: string | null
    fileSize: bigint | null
    lastModified: Date | null
    lastProcessedLine: bigint | null
    lastProcessedAt: Date | null
    checksum: string | null
  }

  export type FileStatusCountAggregateOutputType = {
    filePath: number
    projectId: number
    sessionId: number
    userId: number
    fileSize: number
    lastModified: number
    lastProcessedLine: number
    lastProcessedAt: number
    checksum: number
    _all: number
  }


  export type FileStatusAvgAggregateInputType = {
    fileSize?: true
    lastProcessedLine?: true
  }

  export type FileStatusSumAggregateInputType = {
    fileSize?: true
    lastProcessedLine?: true
  }

  export type FileStatusMinAggregateInputType = {
    filePath?: true
    projectId?: true
    sessionId?: true
    userId?: true
    fileSize?: true
    lastModified?: true
    lastProcessedLine?: true
    lastProcessedAt?: true
    checksum?: true
  }

  export type FileStatusMaxAggregateInputType = {
    filePath?: true
    projectId?: true
    sessionId?: true
    userId?: true
    fileSize?: true
    lastModified?: true
    lastProcessedLine?: true
    lastProcessedAt?: true
    checksum?: true
  }

  export type FileStatusCountAggregateInputType = {
    filePath?: true
    projectId?: true
    sessionId?: true
    userId?: true
    fileSize?: true
    lastModified?: true
    lastProcessedLine?: true
    lastProcessedAt?: true
    checksum?: true
    _all?: true
  }

  export type FileStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileStatus to aggregate.
     */
    where?: FileStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileStatuses to fetch.
     */
    orderBy?: FileStatusOrderByWithRelationInput | FileStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FileStatuses
    **/
    _count?: true | FileStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileStatusMaxAggregateInputType
  }

  export type GetFileStatusAggregateType<T extends FileStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateFileStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFileStatus[P]>
      : GetScalarType<T[P], AggregateFileStatus[P]>
  }




  export type FileStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileStatusWhereInput
    orderBy?: FileStatusOrderByWithAggregationInput | FileStatusOrderByWithAggregationInput[]
    by: FileStatusScalarFieldEnum[] | FileStatusScalarFieldEnum
    having?: FileStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileStatusCountAggregateInputType | true
    _avg?: FileStatusAvgAggregateInputType
    _sum?: FileStatusSumAggregateInputType
    _min?: FileStatusMinAggregateInputType
    _max?: FileStatusMaxAggregateInputType
  }

  export type FileStatusGroupByOutputType = {
    filePath: string
    projectId: string | null
    sessionId: string | null
    userId: string | null
    fileSize: bigint | null
    lastModified: Date | null
    lastProcessedLine: bigint
    lastProcessedAt: Date | null
    checksum: string | null
    _count: FileStatusCountAggregateOutputType | null
    _avg: FileStatusAvgAggregateOutputType | null
    _sum: FileStatusSumAggregateOutputType | null
    _min: FileStatusMinAggregateOutputType | null
    _max: FileStatusMaxAggregateOutputType | null
  }

  type GetFileStatusGroupByPayload<T extends FileStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileStatusGroupByOutputType[P]>
            : GetScalarType<T[P], FileStatusGroupByOutputType[P]>
        }
      >
    >


  export type FileStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    filePath?: boolean
    projectId?: boolean
    sessionId?: boolean
    userId?: boolean
    fileSize?: boolean
    lastModified?: boolean
    lastProcessedLine?: boolean
    lastProcessedAt?: boolean
    checksum?: boolean
    project?: boolean | FileStatus$projectArgs<ExtArgs>
    session?: boolean | FileStatus$sessionArgs<ExtArgs>
    user?: boolean | FileStatus$userArgs<ExtArgs>
  }, ExtArgs["result"]["fileStatus"]>

  export type FileStatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    filePath?: boolean
    projectId?: boolean
    sessionId?: boolean
    userId?: boolean
    fileSize?: boolean
    lastModified?: boolean
    lastProcessedLine?: boolean
    lastProcessedAt?: boolean
    checksum?: boolean
    project?: boolean | FileStatus$projectArgs<ExtArgs>
    session?: boolean | FileStatus$sessionArgs<ExtArgs>
    user?: boolean | FileStatus$userArgs<ExtArgs>
  }, ExtArgs["result"]["fileStatus"]>

  export type FileStatusSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    filePath?: boolean
    projectId?: boolean
    sessionId?: boolean
    userId?: boolean
    fileSize?: boolean
    lastModified?: boolean
    lastProcessedLine?: boolean
    lastProcessedAt?: boolean
    checksum?: boolean
    project?: boolean | FileStatus$projectArgs<ExtArgs>
    session?: boolean | FileStatus$sessionArgs<ExtArgs>
    user?: boolean | FileStatus$userArgs<ExtArgs>
  }, ExtArgs["result"]["fileStatus"]>

  export type FileStatusSelectScalar = {
    filePath?: boolean
    projectId?: boolean
    sessionId?: boolean
    userId?: boolean
    fileSize?: boolean
    lastModified?: boolean
    lastProcessedLine?: boolean
    lastProcessedAt?: boolean
    checksum?: boolean
  }

  export type FileStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"filePath" | "projectId" | "sessionId" | "userId" | "fileSize" | "lastModified" | "lastProcessedLine" | "lastProcessedAt" | "checksum", ExtArgs["result"]["fileStatus"]>
  export type FileStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | FileStatus$projectArgs<ExtArgs>
    session?: boolean | FileStatus$sessionArgs<ExtArgs>
    user?: boolean | FileStatus$userArgs<ExtArgs>
  }
  export type FileStatusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | FileStatus$projectArgs<ExtArgs>
    session?: boolean | FileStatus$sessionArgs<ExtArgs>
    user?: boolean | FileStatus$userArgs<ExtArgs>
  }
  export type FileStatusIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | FileStatus$projectArgs<ExtArgs>
    session?: boolean | FileStatus$sessionArgs<ExtArgs>
    user?: boolean | FileStatus$userArgs<ExtArgs>
  }

  export type $FileStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FileStatus"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs> | null
      session: Prisma.$SessionPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      filePath: string
      projectId: string | null
      sessionId: string | null
      userId: string | null
      fileSize: bigint | null
      lastModified: Date | null
      lastProcessedLine: bigint
      lastProcessedAt: Date | null
      checksum: string | null
    }, ExtArgs["result"]["fileStatus"]>
    composites: {}
  }

  type FileStatusGetPayload<S extends boolean | null | undefined | FileStatusDefaultArgs> = $Result.GetResult<Prisma.$FileStatusPayload, S>

  type FileStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileStatusCountAggregateInputType | true
    }

  export interface FileStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FileStatus'], meta: { name: 'FileStatus' } }
    /**
     * Find zero or one FileStatus that matches the filter.
     * @param {FileStatusFindUniqueArgs} args - Arguments to find a FileStatus
     * @example
     * // Get one FileStatus
     * const fileStatus = await prisma.fileStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileStatusFindUniqueArgs>(args: SelectSubset<T, FileStatusFindUniqueArgs<ExtArgs>>): Prisma__FileStatusClient<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FileStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileStatusFindUniqueOrThrowArgs} args - Arguments to find a FileStatus
     * @example
     * // Get one FileStatus
     * const fileStatus = await prisma.fileStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, FileStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileStatusClient<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FileStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStatusFindFirstArgs} args - Arguments to find a FileStatus
     * @example
     * // Get one FileStatus
     * const fileStatus = await prisma.fileStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileStatusFindFirstArgs>(args?: SelectSubset<T, FileStatusFindFirstArgs<ExtArgs>>): Prisma__FileStatusClient<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FileStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStatusFindFirstOrThrowArgs} args - Arguments to find a FileStatus
     * @example
     * // Get one FileStatus
     * const fileStatus = await prisma.fileStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, FileStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileStatusClient<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FileStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FileStatuses
     * const fileStatuses = await prisma.fileStatus.findMany()
     * 
     * // Get first 10 FileStatuses
     * const fileStatuses = await prisma.fileStatus.findMany({ take: 10 })
     * 
     * // Only select the `filePath`
     * const fileStatusWithFilePathOnly = await prisma.fileStatus.findMany({ select: { filePath: true } })
     * 
     */
    findMany<T extends FileStatusFindManyArgs>(args?: SelectSubset<T, FileStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FileStatus.
     * @param {FileStatusCreateArgs} args - Arguments to create a FileStatus.
     * @example
     * // Create one FileStatus
     * const FileStatus = await prisma.fileStatus.create({
     *   data: {
     *     // ... data to create a FileStatus
     *   }
     * })
     * 
     */
    create<T extends FileStatusCreateArgs>(args: SelectSubset<T, FileStatusCreateArgs<ExtArgs>>): Prisma__FileStatusClient<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FileStatuses.
     * @param {FileStatusCreateManyArgs} args - Arguments to create many FileStatuses.
     * @example
     * // Create many FileStatuses
     * const fileStatus = await prisma.fileStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileStatusCreateManyArgs>(args?: SelectSubset<T, FileStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FileStatuses and returns the data saved in the database.
     * @param {FileStatusCreateManyAndReturnArgs} args - Arguments to create many FileStatuses.
     * @example
     * // Create many FileStatuses
     * const fileStatus = await prisma.fileStatus.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FileStatuses and only return the `filePath`
     * const fileStatusWithFilePathOnly = await prisma.fileStatus.createManyAndReturn({
     *   select: { filePath: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileStatusCreateManyAndReturnArgs>(args?: SelectSubset<T, FileStatusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FileStatus.
     * @param {FileStatusDeleteArgs} args - Arguments to delete one FileStatus.
     * @example
     * // Delete one FileStatus
     * const FileStatus = await prisma.fileStatus.delete({
     *   where: {
     *     // ... filter to delete one FileStatus
     *   }
     * })
     * 
     */
    delete<T extends FileStatusDeleteArgs>(args: SelectSubset<T, FileStatusDeleteArgs<ExtArgs>>): Prisma__FileStatusClient<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FileStatus.
     * @param {FileStatusUpdateArgs} args - Arguments to update one FileStatus.
     * @example
     * // Update one FileStatus
     * const fileStatus = await prisma.fileStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileStatusUpdateArgs>(args: SelectSubset<T, FileStatusUpdateArgs<ExtArgs>>): Prisma__FileStatusClient<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FileStatuses.
     * @param {FileStatusDeleteManyArgs} args - Arguments to filter FileStatuses to delete.
     * @example
     * // Delete a few FileStatuses
     * const { count } = await prisma.fileStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileStatusDeleteManyArgs>(args?: SelectSubset<T, FileStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FileStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FileStatuses
     * const fileStatus = await prisma.fileStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileStatusUpdateManyArgs>(args: SelectSubset<T, FileStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FileStatuses and returns the data updated in the database.
     * @param {FileStatusUpdateManyAndReturnArgs} args - Arguments to update many FileStatuses.
     * @example
     * // Update many FileStatuses
     * const fileStatus = await prisma.fileStatus.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FileStatuses and only return the `filePath`
     * const fileStatusWithFilePathOnly = await prisma.fileStatus.updateManyAndReturn({
     *   select: { filePath: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileStatusUpdateManyAndReturnArgs>(args: SelectSubset<T, FileStatusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FileStatus.
     * @param {FileStatusUpsertArgs} args - Arguments to update or create a FileStatus.
     * @example
     * // Update or create a FileStatus
     * const fileStatus = await prisma.fileStatus.upsert({
     *   create: {
     *     // ... data to create a FileStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FileStatus we want to update
     *   }
     * })
     */
    upsert<T extends FileStatusUpsertArgs>(args: SelectSubset<T, FileStatusUpsertArgs<ExtArgs>>): Prisma__FileStatusClient<$Result.GetResult<Prisma.$FileStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FileStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStatusCountArgs} args - Arguments to filter FileStatuses to count.
     * @example
     * // Count the number of FileStatuses
     * const count = await prisma.fileStatus.count({
     *   where: {
     *     // ... the filter for the FileStatuses we want to count
     *   }
     * })
    **/
    count<T extends FileStatusCountArgs>(
      args?: Subset<T, FileStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FileStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileStatusAggregateArgs>(args: Subset<T, FileStatusAggregateArgs>): Prisma.PrismaPromise<GetFileStatusAggregateType<T>>

    /**
     * Group by FileStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileStatusGroupByArgs['orderBy'] }
        : { orderBy?: FileStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FileStatus model
   */
  readonly fields: FileStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FileStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends FileStatus$projectArgs<ExtArgs> = {}>(args?: Subset<T, FileStatus$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    session<T extends FileStatus$sessionArgs<ExtArgs> = {}>(args?: Subset<T, FileStatus$sessionArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends FileStatus$userArgs<ExtArgs> = {}>(args?: Subset<T, FileStatus$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FileStatus model
   */
  interface FileStatusFieldRefs {
    readonly filePath: FieldRef<"FileStatus", 'String'>
    readonly projectId: FieldRef<"FileStatus", 'String'>
    readonly sessionId: FieldRef<"FileStatus", 'String'>
    readonly userId: FieldRef<"FileStatus", 'String'>
    readonly fileSize: FieldRef<"FileStatus", 'BigInt'>
    readonly lastModified: FieldRef<"FileStatus", 'DateTime'>
    readonly lastProcessedLine: FieldRef<"FileStatus", 'BigInt'>
    readonly lastProcessedAt: FieldRef<"FileStatus", 'DateTime'>
    readonly checksum: FieldRef<"FileStatus", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FileStatus findUnique
   */
  export type FileStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusInclude<ExtArgs> | null
    /**
     * Filter, which FileStatus to fetch.
     */
    where: FileStatusWhereUniqueInput
  }

  /**
   * FileStatus findUniqueOrThrow
   */
  export type FileStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusInclude<ExtArgs> | null
    /**
     * Filter, which FileStatus to fetch.
     */
    where: FileStatusWhereUniqueInput
  }

  /**
   * FileStatus findFirst
   */
  export type FileStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusInclude<ExtArgs> | null
    /**
     * Filter, which FileStatus to fetch.
     */
    where?: FileStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileStatuses to fetch.
     */
    orderBy?: FileStatusOrderByWithRelationInput | FileStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileStatuses.
     */
    cursor?: FileStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileStatuses.
     */
    distinct?: FileStatusScalarFieldEnum | FileStatusScalarFieldEnum[]
  }

  /**
   * FileStatus findFirstOrThrow
   */
  export type FileStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusInclude<ExtArgs> | null
    /**
     * Filter, which FileStatus to fetch.
     */
    where?: FileStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileStatuses to fetch.
     */
    orderBy?: FileStatusOrderByWithRelationInput | FileStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileStatuses.
     */
    cursor?: FileStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileStatuses.
     */
    distinct?: FileStatusScalarFieldEnum | FileStatusScalarFieldEnum[]
  }

  /**
   * FileStatus findMany
   */
  export type FileStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusInclude<ExtArgs> | null
    /**
     * Filter, which FileStatuses to fetch.
     */
    where?: FileStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileStatuses to fetch.
     */
    orderBy?: FileStatusOrderByWithRelationInput | FileStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FileStatuses.
     */
    cursor?: FileStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileStatuses.
     */
    skip?: number
    distinct?: FileStatusScalarFieldEnum | FileStatusScalarFieldEnum[]
  }

  /**
   * FileStatus create
   */
  export type FileStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a FileStatus.
     */
    data: XOR<FileStatusCreateInput, FileStatusUncheckedCreateInput>
  }

  /**
   * FileStatus createMany
   */
  export type FileStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FileStatuses.
     */
    data: FileStatusCreateManyInput | FileStatusCreateManyInput[]
  }

  /**
   * FileStatus createManyAndReturn
   */
  export type FileStatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * The data used to create many FileStatuses.
     */
    data: FileStatusCreateManyInput | FileStatusCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FileStatus update
   */
  export type FileStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a FileStatus.
     */
    data: XOR<FileStatusUpdateInput, FileStatusUncheckedUpdateInput>
    /**
     * Choose, which FileStatus to update.
     */
    where: FileStatusWhereUniqueInput
  }

  /**
   * FileStatus updateMany
   */
  export type FileStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FileStatuses.
     */
    data: XOR<FileStatusUpdateManyMutationInput, FileStatusUncheckedUpdateManyInput>
    /**
     * Filter which FileStatuses to update
     */
    where?: FileStatusWhereInput
    /**
     * Limit how many FileStatuses to update.
     */
    limit?: number
  }

  /**
   * FileStatus updateManyAndReturn
   */
  export type FileStatusUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * The data used to update FileStatuses.
     */
    data: XOR<FileStatusUpdateManyMutationInput, FileStatusUncheckedUpdateManyInput>
    /**
     * Filter which FileStatuses to update
     */
    where?: FileStatusWhereInput
    /**
     * Limit how many FileStatuses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FileStatus upsert
   */
  export type FileStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the FileStatus to update in case it exists.
     */
    where: FileStatusWhereUniqueInput
    /**
     * In case the FileStatus found by the `where` argument doesn't exist, create a new FileStatus with this data.
     */
    create: XOR<FileStatusCreateInput, FileStatusUncheckedCreateInput>
    /**
     * In case the FileStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileStatusUpdateInput, FileStatusUncheckedUpdateInput>
  }

  /**
   * FileStatus delete
   */
  export type FileStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusInclude<ExtArgs> | null
    /**
     * Filter which FileStatus to delete.
     */
    where: FileStatusWhereUniqueInput
  }

  /**
   * FileStatus deleteMany
   */
  export type FileStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileStatuses to delete
     */
    where?: FileStatusWhereInput
    /**
     * Limit how many FileStatuses to delete.
     */
    limit?: number
  }

  /**
   * FileStatus.project
   */
  export type FileStatus$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * FileStatus.session
   */
  export type FileStatus$sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
  }

  /**
   * FileStatus.user
   */
  export type FileStatus$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * FileStatus without action
   */
  export type FileStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileStatus
     */
    select?: FileStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileStatus
     */
    omit?: FileStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileStatusInclude<ExtArgs> | null
  }


  /**
   * Model SyncStatus
   */

  export type AggregateSyncStatus = {
    _count: SyncStatusCountAggregateOutputType | null
    _avg: SyncStatusAvgAggregateOutputType | null
    _sum: SyncStatusSumAggregateOutputType | null
    _min: SyncStatusMinAggregateOutputType | null
    _max: SyncStatusMaxAggregateOutputType | null
  }

  export type SyncStatusAvgAggregateOutputType = {
    id: number | null
    retryCount: number | null
  }

  export type SyncStatusSumAggregateOutputType = {
    id: number | null
    retryCount: number | null
  }

  export type SyncStatusMinAggregateOutputType = {
    id: number | null
    tableName: string | null
    recordId: string | null
    operation: string | null
    localTimestamp: Date | null
    syncedAt: Date | null
    syncBatchId: string | null
    syncResponse: string | null
    retryCount: number | null
  }

  export type SyncStatusMaxAggregateOutputType = {
    id: number | null
    tableName: string | null
    recordId: string | null
    operation: string | null
    localTimestamp: Date | null
    syncedAt: Date | null
    syncBatchId: string | null
    syncResponse: string | null
    retryCount: number | null
  }

  export type SyncStatusCountAggregateOutputType = {
    id: number
    tableName: number
    recordId: number
    operation: number
    localTimestamp: number
    syncedAt: number
    syncBatchId: number
    syncResponse: number
    retryCount: number
    _all: number
  }


  export type SyncStatusAvgAggregateInputType = {
    id?: true
    retryCount?: true
  }

  export type SyncStatusSumAggregateInputType = {
    id?: true
    retryCount?: true
  }

  export type SyncStatusMinAggregateInputType = {
    id?: true
    tableName?: true
    recordId?: true
    operation?: true
    localTimestamp?: true
    syncedAt?: true
    syncBatchId?: true
    syncResponse?: true
    retryCount?: true
  }

  export type SyncStatusMaxAggregateInputType = {
    id?: true
    tableName?: true
    recordId?: true
    operation?: true
    localTimestamp?: true
    syncedAt?: true
    syncBatchId?: true
    syncResponse?: true
    retryCount?: true
  }

  export type SyncStatusCountAggregateInputType = {
    id?: true
    tableName?: true
    recordId?: true
    operation?: true
    localTimestamp?: true
    syncedAt?: true
    syncBatchId?: true
    syncResponse?: true
    retryCount?: true
    _all?: true
  }

  export type SyncStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncStatus to aggregate.
     */
    where?: SyncStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncStatuses to fetch.
     */
    orderBy?: SyncStatusOrderByWithRelationInput | SyncStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SyncStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SyncStatuses
    **/
    _count?: true | SyncStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SyncStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SyncStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SyncStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SyncStatusMaxAggregateInputType
  }

  export type GetSyncStatusAggregateType<T extends SyncStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateSyncStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSyncStatus[P]>
      : GetScalarType<T[P], AggregateSyncStatus[P]>
  }




  export type SyncStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SyncStatusWhereInput
    orderBy?: SyncStatusOrderByWithAggregationInput | SyncStatusOrderByWithAggregationInput[]
    by: SyncStatusScalarFieldEnum[] | SyncStatusScalarFieldEnum
    having?: SyncStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SyncStatusCountAggregateInputType | true
    _avg?: SyncStatusAvgAggregateInputType
    _sum?: SyncStatusSumAggregateInputType
    _min?: SyncStatusMinAggregateInputType
    _max?: SyncStatusMaxAggregateInputType
  }

  export type SyncStatusGroupByOutputType = {
    id: number
    tableName: string
    recordId: string
    operation: string
    localTimestamp: Date
    syncedAt: Date | null
    syncBatchId: string | null
    syncResponse: string | null
    retryCount: number
    _count: SyncStatusCountAggregateOutputType | null
    _avg: SyncStatusAvgAggregateOutputType | null
    _sum: SyncStatusSumAggregateOutputType | null
    _min: SyncStatusMinAggregateOutputType | null
    _max: SyncStatusMaxAggregateOutputType | null
  }

  type GetSyncStatusGroupByPayload<T extends SyncStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SyncStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SyncStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SyncStatusGroupByOutputType[P]>
            : GetScalarType<T[P], SyncStatusGroupByOutputType[P]>
        }
      >
    >


  export type SyncStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tableName?: boolean
    recordId?: boolean
    operation?: boolean
    localTimestamp?: boolean
    syncedAt?: boolean
    syncBatchId?: boolean
    syncResponse?: boolean
    retryCount?: boolean
  }, ExtArgs["result"]["syncStatus"]>

  export type SyncStatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tableName?: boolean
    recordId?: boolean
    operation?: boolean
    localTimestamp?: boolean
    syncedAt?: boolean
    syncBatchId?: boolean
    syncResponse?: boolean
    retryCount?: boolean
  }, ExtArgs["result"]["syncStatus"]>

  export type SyncStatusSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tableName?: boolean
    recordId?: boolean
    operation?: boolean
    localTimestamp?: boolean
    syncedAt?: boolean
    syncBatchId?: boolean
    syncResponse?: boolean
    retryCount?: boolean
  }, ExtArgs["result"]["syncStatus"]>

  export type SyncStatusSelectScalar = {
    id?: boolean
    tableName?: boolean
    recordId?: boolean
    operation?: boolean
    localTimestamp?: boolean
    syncedAt?: boolean
    syncBatchId?: boolean
    syncResponse?: boolean
    retryCount?: boolean
  }

  export type SyncStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tableName" | "recordId" | "operation" | "localTimestamp" | "syncedAt" | "syncBatchId" | "syncResponse" | "retryCount", ExtArgs["result"]["syncStatus"]>

  export type $SyncStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SyncStatus"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tableName: string
      recordId: string
      operation: string
      localTimestamp: Date
      syncedAt: Date | null
      syncBatchId: string | null
      syncResponse: string | null
      retryCount: number
    }, ExtArgs["result"]["syncStatus"]>
    composites: {}
  }

  type SyncStatusGetPayload<S extends boolean | null | undefined | SyncStatusDefaultArgs> = $Result.GetResult<Prisma.$SyncStatusPayload, S>

  type SyncStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SyncStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SyncStatusCountAggregateInputType | true
    }

  export interface SyncStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SyncStatus'], meta: { name: 'SyncStatus' } }
    /**
     * Find zero or one SyncStatus that matches the filter.
     * @param {SyncStatusFindUniqueArgs} args - Arguments to find a SyncStatus
     * @example
     * // Get one SyncStatus
     * const syncStatus = await prisma.syncStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SyncStatusFindUniqueArgs>(args: SelectSubset<T, SyncStatusFindUniqueArgs<ExtArgs>>): Prisma__SyncStatusClient<$Result.GetResult<Prisma.$SyncStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SyncStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SyncStatusFindUniqueOrThrowArgs} args - Arguments to find a SyncStatus
     * @example
     * // Get one SyncStatus
     * const syncStatus = await prisma.syncStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SyncStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, SyncStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SyncStatusClient<$Result.GetResult<Prisma.$SyncStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SyncStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncStatusFindFirstArgs} args - Arguments to find a SyncStatus
     * @example
     * // Get one SyncStatus
     * const syncStatus = await prisma.syncStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SyncStatusFindFirstArgs>(args?: SelectSubset<T, SyncStatusFindFirstArgs<ExtArgs>>): Prisma__SyncStatusClient<$Result.GetResult<Prisma.$SyncStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SyncStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncStatusFindFirstOrThrowArgs} args - Arguments to find a SyncStatus
     * @example
     * // Get one SyncStatus
     * const syncStatus = await prisma.syncStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SyncStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, SyncStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__SyncStatusClient<$Result.GetResult<Prisma.$SyncStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SyncStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SyncStatuses
     * const syncStatuses = await prisma.syncStatus.findMany()
     * 
     * // Get first 10 SyncStatuses
     * const syncStatuses = await prisma.syncStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const syncStatusWithIdOnly = await prisma.syncStatus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SyncStatusFindManyArgs>(args?: SelectSubset<T, SyncStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SyncStatus.
     * @param {SyncStatusCreateArgs} args - Arguments to create a SyncStatus.
     * @example
     * // Create one SyncStatus
     * const SyncStatus = await prisma.syncStatus.create({
     *   data: {
     *     // ... data to create a SyncStatus
     *   }
     * })
     * 
     */
    create<T extends SyncStatusCreateArgs>(args: SelectSubset<T, SyncStatusCreateArgs<ExtArgs>>): Prisma__SyncStatusClient<$Result.GetResult<Prisma.$SyncStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SyncStatuses.
     * @param {SyncStatusCreateManyArgs} args - Arguments to create many SyncStatuses.
     * @example
     * // Create many SyncStatuses
     * const syncStatus = await prisma.syncStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SyncStatusCreateManyArgs>(args?: SelectSubset<T, SyncStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SyncStatuses and returns the data saved in the database.
     * @param {SyncStatusCreateManyAndReturnArgs} args - Arguments to create many SyncStatuses.
     * @example
     * // Create many SyncStatuses
     * const syncStatus = await prisma.syncStatus.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SyncStatuses and only return the `id`
     * const syncStatusWithIdOnly = await prisma.syncStatus.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SyncStatusCreateManyAndReturnArgs>(args?: SelectSubset<T, SyncStatusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncStatusPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SyncStatus.
     * @param {SyncStatusDeleteArgs} args - Arguments to delete one SyncStatus.
     * @example
     * // Delete one SyncStatus
     * const SyncStatus = await prisma.syncStatus.delete({
     *   where: {
     *     // ... filter to delete one SyncStatus
     *   }
     * })
     * 
     */
    delete<T extends SyncStatusDeleteArgs>(args: SelectSubset<T, SyncStatusDeleteArgs<ExtArgs>>): Prisma__SyncStatusClient<$Result.GetResult<Prisma.$SyncStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SyncStatus.
     * @param {SyncStatusUpdateArgs} args - Arguments to update one SyncStatus.
     * @example
     * // Update one SyncStatus
     * const syncStatus = await prisma.syncStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SyncStatusUpdateArgs>(args: SelectSubset<T, SyncStatusUpdateArgs<ExtArgs>>): Prisma__SyncStatusClient<$Result.GetResult<Prisma.$SyncStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SyncStatuses.
     * @param {SyncStatusDeleteManyArgs} args - Arguments to filter SyncStatuses to delete.
     * @example
     * // Delete a few SyncStatuses
     * const { count } = await prisma.syncStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SyncStatusDeleteManyArgs>(args?: SelectSubset<T, SyncStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SyncStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SyncStatuses
     * const syncStatus = await prisma.syncStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SyncStatusUpdateManyArgs>(args: SelectSubset<T, SyncStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SyncStatuses and returns the data updated in the database.
     * @param {SyncStatusUpdateManyAndReturnArgs} args - Arguments to update many SyncStatuses.
     * @example
     * // Update many SyncStatuses
     * const syncStatus = await prisma.syncStatus.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SyncStatuses and only return the `id`
     * const syncStatusWithIdOnly = await prisma.syncStatus.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SyncStatusUpdateManyAndReturnArgs>(args: SelectSubset<T, SyncStatusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncStatusPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SyncStatus.
     * @param {SyncStatusUpsertArgs} args - Arguments to update or create a SyncStatus.
     * @example
     * // Update or create a SyncStatus
     * const syncStatus = await prisma.syncStatus.upsert({
     *   create: {
     *     // ... data to create a SyncStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SyncStatus we want to update
     *   }
     * })
     */
    upsert<T extends SyncStatusUpsertArgs>(args: SelectSubset<T, SyncStatusUpsertArgs<ExtArgs>>): Prisma__SyncStatusClient<$Result.GetResult<Prisma.$SyncStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SyncStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncStatusCountArgs} args - Arguments to filter SyncStatuses to count.
     * @example
     * // Count the number of SyncStatuses
     * const count = await prisma.syncStatus.count({
     *   where: {
     *     // ... the filter for the SyncStatuses we want to count
     *   }
     * })
    **/
    count<T extends SyncStatusCountArgs>(
      args?: Subset<T, SyncStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SyncStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SyncStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SyncStatusAggregateArgs>(args: Subset<T, SyncStatusAggregateArgs>): Prisma.PrismaPromise<GetSyncStatusAggregateType<T>>

    /**
     * Group by SyncStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SyncStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SyncStatusGroupByArgs['orderBy'] }
        : { orderBy?: SyncStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SyncStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSyncStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SyncStatus model
   */
  readonly fields: SyncStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SyncStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SyncStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SyncStatus model
   */
  interface SyncStatusFieldRefs {
    readonly id: FieldRef<"SyncStatus", 'Int'>
    readonly tableName: FieldRef<"SyncStatus", 'String'>
    readonly recordId: FieldRef<"SyncStatus", 'String'>
    readonly operation: FieldRef<"SyncStatus", 'String'>
    readonly localTimestamp: FieldRef<"SyncStatus", 'DateTime'>
    readonly syncedAt: FieldRef<"SyncStatus", 'DateTime'>
    readonly syncBatchId: FieldRef<"SyncStatus", 'String'>
    readonly syncResponse: FieldRef<"SyncStatus", 'String'>
    readonly retryCount: FieldRef<"SyncStatus", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SyncStatus findUnique
   */
  export type SyncStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncStatus
     */
    select?: SyncStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncStatus
     */
    omit?: SyncStatusOmit<ExtArgs> | null
    /**
     * Filter, which SyncStatus to fetch.
     */
    where: SyncStatusWhereUniqueInput
  }

  /**
   * SyncStatus findUniqueOrThrow
   */
  export type SyncStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncStatus
     */
    select?: SyncStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncStatus
     */
    omit?: SyncStatusOmit<ExtArgs> | null
    /**
     * Filter, which SyncStatus to fetch.
     */
    where: SyncStatusWhereUniqueInput
  }

  /**
   * SyncStatus findFirst
   */
  export type SyncStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncStatus
     */
    select?: SyncStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncStatus
     */
    omit?: SyncStatusOmit<ExtArgs> | null
    /**
     * Filter, which SyncStatus to fetch.
     */
    where?: SyncStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncStatuses to fetch.
     */
    orderBy?: SyncStatusOrderByWithRelationInput | SyncStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncStatuses.
     */
    cursor?: SyncStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncStatuses.
     */
    distinct?: SyncStatusScalarFieldEnum | SyncStatusScalarFieldEnum[]
  }

  /**
   * SyncStatus findFirstOrThrow
   */
  export type SyncStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncStatus
     */
    select?: SyncStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncStatus
     */
    omit?: SyncStatusOmit<ExtArgs> | null
    /**
     * Filter, which SyncStatus to fetch.
     */
    where?: SyncStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncStatuses to fetch.
     */
    orderBy?: SyncStatusOrderByWithRelationInput | SyncStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncStatuses.
     */
    cursor?: SyncStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncStatuses.
     */
    distinct?: SyncStatusScalarFieldEnum | SyncStatusScalarFieldEnum[]
  }

  /**
   * SyncStatus findMany
   */
  export type SyncStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncStatus
     */
    select?: SyncStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncStatus
     */
    omit?: SyncStatusOmit<ExtArgs> | null
    /**
     * Filter, which SyncStatuses to fetch.
     */
    where?: SyncStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncStatuses to fetch.
     */
    orderBy?: SyncStatusOrderByWithRelationInput | SyncStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SyncStatuses.
     */
    cursor?: SyncStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncStatuses.
     */
    skip?: number
    distinct?: SyncStatusScalarFieldEnum | SyncStatusScalarFieldEnum[]
  }

  /**
   * SyncStatus create
   */
  export type SyncStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncStatus
     */
    select?: SyncStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncStatus
     */
    omit?: SyncStatusOmit<ExtArgs> | null
    /**
     * The data needed to create a SyncStatus.
     */
    data: XOR<SyncStatusCreateInput, SyncStatusUncheckedCreateInput>
  }

  /**
   * SyncStatus createMany
   */
  export type SyncStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SyncStatuses.
     */
    data: SyncStatusCreateManyInput | SyncStatusCreateManyInput[]
  }

  /**
   * SyncStatus createManyAndReturn
   */
  export type SyncStatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncStatus
     */
    select?: SyncStatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SyncStatus
     */
    omit?: SyncStatusOmit<ExtArgs> | null
    /**
     * The data used to create many SyncStatuses.
     */
    data: SyncStatusCreateManyInput | SyncStatusCreateManyInput[]
  }

  /**
   * SyncStatus update
   */
  export type SyncStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncStatus
     */
    select?: SyncStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncStatus
     */
    omit?: SyncStatusOmit<ExtArgs> | null
    /**
     * The data needed to update a SyncStatus.
     */
    data: XOR<SyncStatusUpdateInput, SyncStatusUncheckedUpdateInput>
    /**
     * Choose, which SyncStatus to update.
     */
    where: SyncStatusWhereUniqueInput
  }

  /**
   * SyncStatus updateMany
   */
  export type SyncStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SyncStatuses.
     */
    data: XOR<SyncStatusUpdateManyMutationInput, SyncStatusUncheckedUpdateManyInput>
    /**
     * Filter which SyncStatuses to update
     */
    where?: SyncStatusWhereInput
    /**
     * Limit how many SyncStatuses to update.
     */
    limit?: number
  }

  /**
   * SyncStatus updateManyAndReturn
   */
  export type SyncStatusUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncStatus
     */
    select?: SyncStatusSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SyncStatus
     */
    omit?: SyncStatusOmit<ExtArgs> | null
    /**
     * The data used to update SyncStatuses.
     */
    data: XOR<SyncStatusUpdateManyMutationInput, SyncStatusUncheckedUpdateManyInput>
    /**
     * Filter which SyncStatuses to update
     */
    where?: SyncStatusWhereInput
    /**
     * Limit how many SyncStatuses to update.
     */
    limit?: number
  }

  /**
   * SyncStatus upsert
   */
  export type SyncStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncStatus
     */
    select?: SyncStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncStatus
     */
    omit?: SyncStatusOmit<ExtArgs> | null
    /**
     * The filter to search for the SyncStatus to update in case it exists.
     */
    where: SyncStatusWhereUniqueInput
    /**
     * In case the SyncStatus found by the `where` argument doesn't exist, create a new SyncStatus with this data.
     */
    create: XOR<SyncStatusCreateInput, SyncStatusUncheckedCreateInput>
    /**
     * In case the SyncStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SyncStatusUpdateInput, SyncStatusUncheckedUpdateInput>
  }

  /**
   * SyncStatus delete
   */
  export type SyncStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncStatus
     */
    select?: SyncStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncStatus
     */
    omit?: SyncStatusOmit<ExtArgs> | null
    /**
     * Filter which SyncStatus to delete.
     */
    where: SyncStatusWhereUniqueInput
  }

  /**
   * SyncStatus deleteMany
   */
  export type SyncStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncStatuses to delete
     */
    where?: SyncStatusWhereInput
    /**
     * Limit how many SyncStatuses to delete.
     */
    limit?: number
  }

  /**
   * SyncStatus without action
   */
  export type SyncStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncStatus
     */
    select?: SyncStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncStatus
     */
    omit?: SyncStatusOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    totalProjects: 'totalProjects',
    totalSessions: 'totalSessions',
    totalMessages: 'totalMessages',
    totalCost: 'totalCost',
    totalInputTokens: 'totalInputTokens',
    totalOutputTokens: 'totalOutputTokens',
    totalCacheCreationTokens: 'totalCacheCreationTokens',
    totalCacheReadTokens: 'totalCacheReadTokens'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MachineScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    machineName: 'machineName',
    osInfo: 'osInfo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    totalProjects: 'totalProjects',
    totalSessions: 'totalSessions',
    totalMessages: 'totalMessages',
    totalCost: 'totalCost',
    totalInputTokens: 'totalInputTokens',
    totalOutputTokens: 'totalOutputTokens',
    totalCacheCreationTokens: 'totalCacheCreationTokens',
    totalCacheReadTokens: 'totalCacheReadTokens'
  };

  export type MachineScalarFieldEnum = (typeof MachineScalarFieldEnum)[keyof typeof MachineScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    projectName: 'projectName',
    userId: 'userId',
    clientMachineId: 'clientMachineId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    totalSessions: 'totalSessions',
    totalMessages: 'totalMessages',
    totalCost: 'totalCost',
    totalInputTokens: 'totalInputTokens',
    totalOutputTokens: 'totalOutputTokens',
    totalCacheCreationTokens: 'totalCacheCreationTokens',
    totalCacheReadTokens: 'totalCacheReadTokens'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    userId: 'userId',
    clientMachineId: 'clientMachineId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    totalMessages: 'totalMessages',
    totalCost: 'totalCost',
    totalInputTokens: 'totalInputTokens',
    totalOutputTokens: 'totalOutputTokens',
    totalCacheCreationTokens: 'totalCacheCreationTokens',
    totalCacheReadTokens: 'totalCacheReadTokens'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    uuid: 'uuid',
    messageId: 'messageId',
    requestId: 'requestId',
    sessionId: 'sessionId',
    projectId: 'projectId',
    userId: 'userId',
    clientMachineId: 'clientMachineId',
    timestamp: 'timestamp',
    role: 'role',
    model: 'model',
    type: 'type',
    inputTokens: 'inputTokens',
    outputTokens: 'outputTokens',
    cacheCreationTokens: 'cacheCreationTokens',
    cacheReadTokens: 'cacheReadTokens',
    pricePerInputToken: 'pricePerInputToken',
    pricePerOutputToken: 'pricePerOutputToken',
    pricePerCacheWriteToken: 'pricePerCacheWriteToken',
    pricePerCacheReadToken: 'pricePerCacheReadToken',
    cacheDurationMinutes: 'cacheDurationMinutes',
    messageCost: 'messageCost'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const FileStatusScalarFieldEnum: {
    filePath: 'filePath',
    projectId: 'projectId',
    sessionId: 'sessionId',
    userId: 'userId',
    fileSize: 'fileSize',
    lastModified: 'lastModified',
    lastProcessedLine: 'lastProcessedLine',
    lastProcessedAt: 'lastProcessedAt',
    checksum: 'checksum'
  };

  export type FileStatusScalarFieldEnum = (typeof FileStatusScalarFieldEnum)[keyof typeof FileStatusScalarFieldEnum]


  export const SyncStatusScalarFieldEnum: {
    id: 'id',
    tableName: 'tableName',
    recordId: 'recordId',
    operation: 'operation',
    localTimestamp: 'localTimestamp',
    syncedAt: 'syncedAt',
    syncBatchId: 'syncBatchId',
    syncResponse: 'syncResponse',
    retryCount: 'retryCount'
  };

  export type SyncStatusScalarFieldEnum = (typeof SyncStatusScalarFieldEnum)[keyof typeof SyncStatusScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    totalProjects?: IntFilter<"User"> | number
    totalSessions?: IntFilter<"User"> | number
    totalMessages?: BigIntFilter<"User"> | bigint | number
    totalCost?: DecimalFilter<"User"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFilter<"User"> | bigint | number
    totalOutputTokens?: BigIntFilter<"User"> | bigint | number
    totalCacheCreationTokens?: BigIntFilter<"User"> | bigint | number
    totalCacheReadTokens?: BigIntFilter<"User"> | bigint | number
    machines?: MachineListRelationFilter
    projects?: ProjectListRelationFilter
    sessions?: SessionListRelationFilter
    messages?: MessageListRelationFilter
    fileStatus?: FileStatusListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
    machines?: MachineOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    fileStatus?: FileStatusOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    email?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    totalProjects?: IntFilter<"User"> | number
    totalSessions?: IntFilter<"User"> | number
    totalMessages?: BigIntFilter<"User"> | bigint | number
    totalCost?: DecimalFilter<"User"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFilter<"User"> | bigint | number
    totalOutputTokens?: BigIntFilter<"User"> | bigint | number
    totalCacheCreationTokens?: BigIntFilter<"User"> | bigint | number
    totalCacheReadTokens?: BigIntFilter<"User"> | bigint | number
    machines?: MachineListRelationFilter
    projects?: ProjectListRelationFilter
    sessions?: SessionListRelationFilter
    messages?: MessageListRelationFilter
    fileStatus?: FileStatusListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    totalProjects?: IntWithAggregatesFilter<"User"> | number
    totalSessions?: IntWithAggregatesFilter<"User"> | number
    totalMessages?: BigIntWithAggregatesFilter<"User"> | bigint | number
    totalCost?: DecimalWithAggregatesFilter<"User"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntWithAggregatesFilter<"User"> | bigint | number
    totalOutputTokens?: BigIntWithAggregatesFilter<"User"> | bigint | number
    totalCacheCreationTokens?: BigIntWithAggregatesFilter<"User"> | bigint | number
    totalCacheReadTokens?: BigIntWithAggregatesFilter<"User"> | bigint | number
  }

  export type MachineWhereInput = {
    AND?: MachineWhereInput | MachineWhereInput[]
    OR?: MachineWhereInput[]
    NOT?: MachineWhereInput | MachineWhereInput[]
    id?: StringFilter<"Machine"> | string
    userId?: StringFilter<"Machine"> | string
    machineName?: StringNullableFilter<"Machine"> | string | null
    osInfo?: StringNullableFilter<"Machine"> | string | null
    createdAt?: DateTimeFilter<"Machine"> | Date | string
    updatedAt?: DateTimeFilter<"Machine"> | Date | string
    totalProjects?: IntFilter<"Machine"> | number
    totalSessions?: IntFilter<"Machine"> | number
    totalMessages?: BigIntFilter<"Machine"> | bigint | number
    totalCost?: DecimalFilter<"Machine"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFilter<"Machine"> | bigint | number
    totalOutputTokens?: BigIntFilter<"Machine"> | bigint | number
    totalCacheCreationTokens?: BigIntFilter<"Machine"> | bigint | number
    totalCacheReadTokens?: BigIntFilter<"Machine"> | bigint | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    projects?: ProjectListRelationFilter
    sessions?: SessionListRelationFilter
    messages?: MessageListRelationFilter
  }

  export type MachineOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineName?: SortOrderInput | SortOrder
    osInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
    user?: UserOrderByWithRelationInput
    projects?: ProjectOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type MachineWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MachineWhereInput | MachineWhereInput[]
    OR?: MachineWhereInput[]
    NOT?: MachineWhereInput | MachineWhereInput[]
    userId?: StringFilter<"Machine"> | string
    machineName?: StringNullableFilter<"Machine"> | string | null
    osInfo?: StringNullableFilter<"Machine"> | string | null
    createdAt?: DateTimeFilter<"Machine"> | Date | string
    updatedAt?: DateTimeFilter<"Machine"> | Date | string
    totalProjects?: IntFilter<"Machine"> | number
    totalSessions?: IntFilter<"Machine"> | number
    totalMessages?: BigIntFilter<"Machine"> | bigint | number
    totalCost?: DecimalFilter<"Machine"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFilter<"Machine"> | bigint | number
    totalOutputTokens?: BigIntFilter<"Machine"> | bigint | number
    totalCacheCreationTokens?: BigIntFilter<"Machine"> | bigint | number
    totalCacheReadTokens?: BigIntFilter<"Machine"> | bigint | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    projects?: ProjectListRelationFilter
    sessions?: SessionListRelationFilter
    messages?: MessageListRelationFilter
  }, "id">

  export type MachineOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    machineName?: SortOrderInput | SortOrder
    osInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
    _count?: MachineCountOrderByAggregateInput
    _avg?: MachineAvgOrderByAggregateInput
    _max?: MachineMaxOrderByAggregateInput
    _min?: MachineMinOrderByAggregateInput
    _sum?: MachineSumOrderByAggregateInput
  }

  export type MachineScalarWhereWithAggregatesInput = {
    AND?: MachineScalarWhereWithAggregatesInput | MachineScalarWhereWithAggregatesInput[]
    OR?: MachineScalarWhereWithAggregatesInput[]
    NOT?: MachineScalarWhereWithAggregatesInput | MachineScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Machine"> | string
    userId?: StringWithAggregatesFilter<"Machine"> | string
    machineName?: StringNullableWithAggregatesFilter<"Machine"> | string | null
    osInfo?: StringNullableWithAggregatesFilter<"Machine"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Machine"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Machine"> | Date | string
    totalProjects?: IntWithAggregatesFilter<"Machine"> | number
    totalSessions?: IntWithAggregatesFilter<"Machine"> | number
    totalMessages?: BigIntWithAggregatesFilter<"Machine"> | bigint | number
    totalCost?: DecimalWithAggregatesFilter<"Machine"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntWithAggregatesFilter<"Machine"> | bigint | number
    totalOutputTokens?: BigIntWithAggregatesFilter<"Machine"> | bigint | number
    totalCacheCreationTokens?: BigIntWithAggregatesFilter<"Machine"> | bigint | number
    totalCacheReadTokens?: BigIntWithAggregatesFilter<"Machine"> | bigint | number
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    projectName?: StringFilter<"Project"> | string
    userId?: StringFilter<"Project"> | string
    clientMachineId?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    totalSessions?: IntFilter<"Project"> | number
    totalMessages?: BigIntFilter<"Project"> | bigint | number
    totalCost?: DecimalFilter<"Project"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFilter<"Project"> | bigint | number
    totalOutputTokens?: BigIntFilter<"Project"> | bigint | number
    totalCacheCreationTokens?: BigIntFilter<"Project"> | bigint | number
    totalCacheReadTokens?: BigIntFilter<"Project"> | bigint | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    machine?: XOR<MachineScalarRelationFilter, MachineWhereInput>
    sessions?: SessionListRelationFilter
    messages?: MessageListRelationFilter
    fileStatus?: FileStatusListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    projectName?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
    user?: UserOrderByWithRelationInput
    machine?: MachineOrderByWithRelationInput
    sessions?: SessionOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    fileStatus?: FileStatusOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectName_clientMachineId?: ProjectProjectNameClientMachineIdCompoundUniqueInput
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    projectName?: StringFilter<"Project"> | string
    userId?: StringFilter<"Project"> | string
    clientMachineId?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    totalSessions?: IntFilter<"Project"> | number
    totalMessages?: BigIntFilter<"Project"> | bigint | number
    totalCost?: DecimalFilter<"Project"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFilter<"Project"> | bigint | number
    totalOutputTokens?: BigIntFilter<"Project"> | bigint | number
    totalCacheCreationTokens?: BigIntFilter<"Project"> | bigint | number
    totalCacheReadTokens?: BigIntFilter<"Project"> | bigint | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    machine?: XOR<MachineScalarRelationFilter, MachineWhereInput>
    sessions?: SessionListRelationFilter
    messages?: MessageListRelationFilter
    fileStatus?: FileStatusListRelationFilter
  }, "id" | "projectName_clientMachineId">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    projectName?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    projectName?: StringWithAggregatesFilter<"Project"> | string
    userId?: StringWithAggregatesFilter<"Project"> | string
    clientMachineId?: StringWithAggregatesFilter<"Project"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    totalSessions?: IntWithAggregatesFilter<"Project"> | number
    totalMessages?: BigIntWithAggregatesFilter<"Project"> | bigint | number
    totalCost?: DecimalWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntWithAggregatesFilter<"Project"> | bigint | number
    totalOutputTokens?: BigIntWithAggregatesFilter<"Project"> | bigint | number
    totalCacheCreationTokens?: BigIntWithAggregatesFilter<"Project"> | bigint | number
    totalCacheReadTokens?: BigIntWithAggregatesFilter<"Project"> | bigint | number
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    projectId?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    clientMachineId?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    totalMessages?: BigIntFilter<"Session"> | bigint | number
    totalCost?: DecimalFilter<"Session"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFilter<"Session"> | bigint | number
    totalOutputTokens?: BigIntFilter<"Session"> | bigint | number
    totalCacheCreationTokens?: BigIntFilter<"Session"> | bigint | number
    totalCacheReadTokens?: BigIntFilter<"Session"> | bigint | number
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    machine?: XOR<MachineScalarRelationFilter, MachineWhereInput>
    messages?: MessageListRelationFilter
    fileStatus?: FileStatusListRelationFilter
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
    project?: ProjectOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    machine?: MachineOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
    fileStatus?: FileStatusOrderByRelationAggregateInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    projectId?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    clientMachineId?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    totalMessages?: BigIntFilter<"Session"> | bigint | number
    totalCost?: DecimalFilter<"Session"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFilter<"Session"> | bigint | number
    totalOutputTokens?: BigIntFilter<"Session"> | bigint | number
    totalCacheCreationTokens?: BigIntFilter<"Session"> | bigint | number
    totalCacheReadTokens?: BigIntFilter<"Session"> | bigint | number
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    machine?: XOR<MachineScalarRelationFilter, MachineWhereInput>
    messages?: MessageListRelationFilter
    fileStatus?: FileStatusListRelationFilter
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    projectId?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    clientMachineId?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    totalMessages?: BigIntWithAggregatesFilter<"Session"> | bigint | number
    totalCost?: DecimalWithAggregatesFilter<"Session"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntWithAggregatesFilter<"Session"> | bigint | number
    totalOutputTokens?: BigIntWithAggregatesFilter<"Session"> | bigint | number
    totalCacheCreationTokens?: BigIntWithAggregatesFilter<"Session"> | bigint | number
    totalCacheReadTokens?: BigIntWithAggregatesFilter<"Session"> | bigint | number
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    uuid?: StringFilter<"Message"> | string
    messageId?: StringFilter<"Message"> | string
    requestId?: StringNullableFilter<"Message"> | string | null
    sessionId?: StringFilter<"Message"> | string
    projectId?: StringFilter<"Message"> | string
    userId?: StringFilter<"Message"> | string
    clientMachineId?: StringFilter<"Message"> | string
    timestamp?: DateTimeNullableFilter<"Message"> | Date | string | null
    role?: StringFilter<"Message"> | string
    model?: StringNullableFilter<"Message"> | string | null
    type?: StringNullableFilter<"Message"> | string | null
    inputTokens?: BigIntFilter<"Message"> | bigint | number
    outputTokens?: BigIntFilter<"Message"> | bigint | number
    cacheCreationTokens?: BigIntFilter<"Message"> | bigint | number
    cacheReadTokens?: BigIntFilter<"Message"> | bigint | number
    pricePerInputToken?: DecimalNullableFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: DecimalNullableFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: DecimalNullableFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: DecimalNullableFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: IntNullableFilter<"Message"> | number | null
    messageCost?: DecimalFilter<"Message"> | Decimal | DecimalJsLike | number | string
    session?: XOR<SessionScalarRelationFilter, SessionWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    machine?: XOR<MachineScalarRelationFilter, MachineWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    uuid?: SortOrder
    messageId?: SortOrder
    requestId?: SortOrderInput | SortOrder
    sessionId?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    timestamp?: SortOrderInput | SortOrder
    role?: SortOrder
    model?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    inputTokens?: SortOrder
    outputTokens?: SortOrder
    cacheCreationTokens?: SortOrder
    cacheReadTokens?: SortOrder
    pricePerInputToken?: SortOrderInput | SortOrder
    pricePerOutputToken?: SortOrderInput | SortOrder
    pricePerCacheWriteToken?: SortOrderInput | SortOrder
    pricePerCacheReadToken?: SortOrderInput | SortOrder
    cacheDurationMinutes?: SortOrderInput | SortOrder
    messageCost?: SortOrder
    session?: SessionOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    machine?: MachineOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    uuid?: string
    sessionId_messageId_uuid?: MessageSessionIdMessageIdUuidCompoundUniqueInput
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    messageId?: StringFilter<"Message"> | string
    requestId?: StringNullableFilter<"Message"> | string | null
    sessionId?: StringFilter<"Message"> | string
    projectId?: StringFilter<"Message"> | string
    userId?: StringFilter<"Message"> | string
    clientMachineId?: StringFilter<"Message"> | string
    timestamp?: DateTimeNullableFilter<"Message"> | Date | string | null
    role?: StringFilter<"Message"> | string
    model?: StringNullableFilter<"Message"> | string | null
    type?: StringNullableFilter<"Message"> | string | null
    inputTokens?: BigIntFilter<"Message"> | bigint | number
    outputTokens?: BigIntFilter<"Message"> | bigint | number
    cacheCreationTokens?: BigIntFilter<"Message"> | bigint | number
    cacheReadTokens?: BigIntFilter<"Message"> | bigint | number
    pricePerInputToken?: DecimalNullableFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: DecimalNullableFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: DecimalNullableFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: DecimalNullableFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: IntNullableFilter<"Message"> | number | null
    messageCost?: DecimalFilter<"Message"> | Decimal | DecimalJsLike | number | string
    session?: XOR<SessionScalarRelationFilter, SessionWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    machine?: XOR<MachineScalarRelationFilter, MachineWhereInput>
  }, "uuid" | "sessionId_messageId_uuid">

  export type MessageOrderByWithAggregationInput = {
    uuid?: SortOrder
    messageId?: SortOrder
    requestId?: SortOrderInput | SortOrder
    sessionId?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    timestamp?: SortOrderInput | SortOrder
    role?: SortOrder
    model?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    inputTokens?: SortOrder
    outputTokens?: SortOrder
    cacheCreationTokens?: SortOrder
    cacheReadTokens?: SortOrder
    pricePerInputToken?: SortOrderInput | SortOrder
    pricePerOutputToken?: SortOrderInput | SortOrder
    pricePerCacheWriteToken?: SortOrderInput | SortOrder
    pricePerCacheReadToken?: SortOrderInput | SortOrder
    cacheDurationMinutes?: SortOrderInput | SortOrder
    messageCost?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    uuid?: StringWithAggregatesFilter<"Message"> | string
    messageId?: StringWithAggregatesFilter<"Message"> | string
    requestId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    sessionId?: StringWithAggregatesFilter<"Message"> | string
    projectId?: StringWithAggregatesFilter<"Message"> | string
    userId?: StringWithAggregatesFilter<"Message"> | string
    clientMachineId?: StringWithAggregatesFilter<"Message"> | string
    timestamp?: DateTimeNullableWithAggregatesFilter<"Message"> | Date | string | null
    role?: StringWithAggregatesFilter<"Message"> | string
    model?: StringNullableWithAggregatesFilter<"Message"> | string | null
    type?: StringNullableWithAggregatesFilter<"Message"> | string | null
    inputTokens?: BigIntWithAggregatesFilter<"Message"> | bigint | number
    outputTokens?: BigIntWithAggregatesFilter<"Message"> | bigint | number
    cacheCreationTokens?: BigIntWithAggregatesFilter<"Message"> | bigint | number
    cacheReadTokens?: BigIntWithAggregatesFilter<"Message"> | bigint | number
    pricePerInputToken?: DecimalNullableWithAggregatesFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: DecimalNullableWithAggregatesFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: DecimalNullableWithAggregatesFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: DecimalNullableWithAggregatesFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: IntNullableWithAggregatesFilter<"Message"> | number | null
    messageCost?: DecimalWithAggregatesFilter<"Message"> | Decimal | DecimalJsLike | number | string
  }

  export type FileStatusWhereInput = {
    AND?: FileStatusWhereInput | FileStatusWhereInput[]
    OR?: FileStatusWhereInput[]
    NOT?: FileStatusWhereInput | FileStatusWhereInput[]
    filePath?: StringFilter<"FileStatus"> | string
    projectId?: StringNullableFilter<"FileStatus"> | string | null
    sessionId?: StringNullableFilter<"FileStatus"> | string | null
    userId?: StringNullableFilter<"FileStatus"> | string | null
    fileSize?: BigIntNullableFilter<"FileStatus"> | bigint | number | null
    lastModified?: DateTimeNullableFilter<"FileStatus"> | Date | string | null
    lastProcessedLine?: BigIntFilter<"FileStatus"> | bigint | number
    lastProcessedAt?: DateTimeNullableFilter<"FileStatus"> | Date | string | null
    checksum?: StringNullableFilter<"FileStatus"> | string | null
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
    session?: XOR<SessionNullableScalarRelationFilter, SessionWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type FileStatusOrderByWithRelationInput = {
    filePath?: SortOrder
    projectId?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    lastModified?: SortOrderInput | SortOrder
    lastProcessedLine?: SortOrder
    lastProcessedAt?: SortOrderInput | SortOrder
    checksum?: SortOrderInput | SortOrder
    project?: ProjectOrderByWithRelationInput
    session?: SessionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type FileStatusWhereUniqueInput = Prisma.AtLeast<{
    filePath?: string
    AND?: FileStatusWhereInput | FileStatusWhereInput[]
    OR?: FileStatusWhereInput[]
    NOT?: FileStatusWhereInput | FileStatusWhereInput[]
    projectId?: StringNullableFilter<"FileStatus"> | string | null
    sessionId?: StringNullableFilter<"FileStatus"> | string | null
    userId?: StringNullableFilter<"FileStatus"> | string | null
    fileSize?: BigIntNullableFilter<"FileStatus"> | bigint | number | null
    lastModified?: DateTimeNullableFilter<"FileStatus"> | Date | string | null
    lastProcessedLine?: BigIntFilter<"FileStatus"> | bigint | number
    lastProcessedAt?: DateTimeNullableFilter<"FileStatus"> | Date | string | null
    checksum?: StringNullableFilter<"FileStatus"> | string | null
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
    session?: XOR<SessionNullableScalarRelationFilter, SessionWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "filePath">

  export type FileStatusOrderByWithAggregationInput = {
    filePath?: SortOrder
    projectId?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    lastModified?: SortOrderInput | SortOrder
    lastProcessedLine?: SortOrder
    lastProcessedAt?: SortOrderInput | SortOrder
    checksum?: SortOrderInput | SortOrder
    _count?: FileStatusCountOrderByAggregateInput
    _avg?: FileStatusAvgOrderByAggregateInput
    _max?: FileStatusMaxOrderByAggregateInput
    _min?: FileStatusMinOrderByAggregateInput
    _sum?: FileStatusSumOrderByAggregateInput
  }

  export type FileStatusScalarWhereWithAggregatesInput = {
    AND?: FileStatusScalarWhereWithAggregatesInput | FileStatusScalarWhereWithAggregatesInput[]
    OR?: FileStatusScalarWhereWithAggregatesInput[]
    NOT?: FileStatusScalarWhereWithAggregatesInput | FileStatusScalarWhereWithAggregatesInput[]
    filePath?: StringWithAggregatesFilter<"FileStatus"> | string
    projectId?: StringNullableWithAggregatesFilter<"FileStatus"> | string | null
    sessionId?: StringNullableWithAggregatesFilter<"FileStatus"> | string | null
    userId?: StringNullableWithAggregatesFilter<"FileStatus"> | string | null
    fileSize?: BigIntNullableWithAggregatesFilter<"FileStatus"> | bigint | number | null
    lastModified?: DateTimeNullableWithAggregatesFilter<"FileStatus"> | Date | string | null
    lastProcessedLine?: BigIntWithAggregatesFilter<"FileStatus"> | bigint | number
    lastProcessedAt?: DateTimeNullableWithAggregatesFilter<"FileStatus"> | Date | string | null
    checksum?: StringNullableWithAggregatesFilter<"FileStatus"> | string | null
  }

  export type SyncStatusWhereInput = {
    AND?: SyncStatusWhereInput | SyncStatusWhereInput[]
    OR?: SyncStatusWhereInput[]
    NOT?: SyncStatusWhereInput | SyncStatusWhereInput[]
    id?: IntFilter<"SyncStatus"> | number
    tableName?: StringFilter<"SyncStatus"> | string
    recordId?: StringFilter<"SyncStatus"> | string
    operation?: StringFilter<"SyncStatus"> | string
    localTimestamp?: DateTimeFilter<"SyncStatus"> | Date | string
    syncedAt?: DateTimeNullableFilter<"SyncStatus"> | Date | string | null
    syncBatchId?: StringNullableFilter<"SyncStatus"> | string | null
    syncResponse?: StringNullableFilter<"SyncStatus"> | string | null
    retryCount?: IntFilter<"SyncStatus"> | number
  }

  export type SyncStatusOrderByWithRelationInput = {
    id?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    operation?: SortOrder
    localTimestamp?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    syncBatchId?: SortOrderInput | SortOrder
    syncResponse?: SortOrderInput | SortOrder
    retryCount?: SortOrder
  }

  export type SyncStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tableName_recordId?: SyncStatusTableNameRecordIdCompoundUniqueInput
    AND?: SyncStatusWhereInput | SyncStatusWhereInput[]
    OR?: SyncStatusWhereInput[]
    NOT?: SyncStatusWhereInput | SyncStatusWhereInput[]
    tableName?: StringFilter<"SyncStatus"> | string
    recordId?: StringFilter<"SyncStatus"> | string
    operation?: StringFilter<"SyncStatus"> | string
    localTimestamp?: DateTimeFilter<"SyncStatus"> | Date | string
    syncedAt?: DateTimeNullableFilter<"SyncStatus"> | Date | string | null
    syncBatchId?: StringNullableFilter<"SyncStatus"> | string | null
    syncResponse?: StringNullableFilter<"SyncStatus"> | string | null
    retryCount?: IntFilter<"SyncStatus"> | number
  }, "id" | "tableName_recordId">

  export type SyncStatusOrderByWithAggregationInput = {
    id?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    operation?: SortOrder
    localTimestamp?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    syncBatchId?: SortOrderInput | SortOrder
    syncResponse?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    _count?: SyncStatusCountOrderByAggregateInput
    _avg?: SyncStatusAvgOrderByAggregateInput
    _max?: SyncStatusMaxOrderByAggregateInput
    _min?: SyncStatusMinOrderByAggregateInput
    _sum?: SyncStatusSumOrderByAggregateInput
  }

  export type SyncStatusScalarWhereWithAggregatesInput = {
    AND?: SyncStatusScalarWhereWithAggregatesInput | SyncStatusScalarWhereWithAggregatesInput[]
    OR?: SyncStatusScalarWhereWithAggregatesInput[]
    NOT?: SyncStatusScalarWhereWithAggregatesInput | SyncStatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SyncStatus"> | number
    tableName?: StringWithAggregatesFilter<"SyncStatus"> | string
    recordId?: StringWithAggregatesFilter<"SyncStatus"> | string
    operation?: StringWithAggregatesFilter<"SyncStatus"> | string
    localTimestamp?: DateTimeWithAggregatesFilter<"SyncStatus"> | Date | string
    syncedAt?: DateTimeNullableWithAggregatesFilter<"SyncStatus"> | Date | string | null
    syncBatchId?: StringNullableWithAggregatesFilter<"SyncStatus"> | string | null
    syncResponse?: StringNullableWithAggregatesFilter<"SyncStatus"> | string | null
    retryCount?: IntWithAggregatesFilter<"SyncStatus"> | number
  }

  export type UserCreateInput = {
    id: string
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    machines?: MachineCreateNestedManyWithoutUserInput
    projects?: ProjectCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    fileStatus?: FileStatusCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    machines?: MachineUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    machines?: MachineUpdateManyWithoutUserNestedInput
    projects?: ProjectUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    fileStatus?: FileStatusUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    machines?: MachineUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type MachineCreateInput = {
    id: string
    machineName?: string | null
    osInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    user: UserCreateNestedOneWithoutMachinesInput
    projects?: ProjectCreateNestedManyWithoutMachineInput
    sessions?: SessionCreateNestedManyWithoutMachineInput
    messages?: MessageCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateInput = {
    id: string
    userId: string
    machineName?: string | null
    osInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    projects?: ProjectUncheckedCreateNestedManyWithoutMachineInput
    sessions?: SessionUncheckedCreateNestedManyWithoutMachineInput
    messages?: MessageUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    machineName?: NullableStringFieldUpdateOperationsInput | string | null
    osInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutMachinesNestedInput
    projects?: ProjectUpdateManyWithoutMachineNestedInput
    sessions?: SessionUpdateManyWithoutMachineNestedInput
    messages?: MessageUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    machineName?: NullableStringFieldUpdateOperationsInput | string | null
    osInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    projects?: ProjectUncheckedUpdateManyWithoutMachineNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutMachineNestedInput
    messages?: MessageUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type MachineCreateManyInput = {
    id: string
    userId: string
    machineName?: string | null
    osInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
  }

  export type MachineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    machineName?: NullableStringFieldUpdateOperationsInput | string | null
    osInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type MachineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    machineName?: NullableStringFieldUpdateOperationsInput | string | null
    osInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProjectCreateInput = {
    id: string
    projectName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    user: UserCreateNestedOneWithoutProjectsInput
    machine: MachineCreateNestedOneWithoutProjectsInput
    sessions?: SessionCreateNestedManyWithoutProjectInput
    messages?: MessageCreateNestedManyWithoutProjectInput
    fileStatus?: FileStatusCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id: string
    projectName: string
    userId: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    sessions?: SessionUncheckedCreateNestedManyWithoutProjectInput
    messages?: MessageUncheckedCreateNestedManyWithoutProjectInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    machine?: MachineUpdateOneRequiredWithoutProjectsNestedInput
    sessions?: SessionUpdateManyWithoutProjectNestedInput
    messages?: MessageUpdateManyWithoutProjectNestedInput
    fileStatus?: FileStatusUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    sessions?: SessionUncheckedUpdateManyWithoutProjectNestedInput
    messages?: MessageUncheckedUpdateManyWithoutProjectNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id: string
    projectName: string
    userId: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type SessionCreateInput = {
    id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    project: ProjectCreateNestedOneWithoutSessionsInput
    user: UserCreateNestedOneWithoutSessionsInput
    machine: MachineCreateNestedOneWithoutSessionsInput
    messages?: MessageCreateNestedManyWithoutSessionInput
    fileStatus?: FileStatusCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id: string
    projectId: string
    userId: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    messages?: MessageUncheckedCreateNestedManyWithoutSessionInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    project?: ProjectUpdateOneRequiredWithoutSessionsNestedInput
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
    machine?: MachineUpdateOneRequiredWithoutSessionsNestedInput
    messages?: MessageUpdateManyWithoutSessionNestedInput
    fileStatus?: FileStatusUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    messages?: MessageUncheckedUpdateManyWithoutSessionNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionCreateManyInput = {
    id: string
    projectId: string
    userId: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type MessageCreateInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
    session: SessionCreateNestedOneWithoutMessagesInput
    project: ProjectCreateNestedOneWithoutMessagesInput
    user: UserCreateNestedOneWithoutMessagesInput
    machine: MachineCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    sessionId: string
    projectId: string
    userId: string
    clientMachineId: string
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
  }

  export type MessageUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    session?: SessionUpdateOneRequiredWithoutMessagesNestedInput
    project?: ProjectUpdateOneRequiredWithoutMessagesNestedInput
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    machine?: MachineUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MessageCreateManyInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    sessionId: string
    projectId: string
    userId: string
    clientMachineId: string
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
  }

  export type MessageUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MessageUncheckedUpdateManyInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type FileStatusCreateInput = {
    filePath: string
    fileSize?: bigint | number | null
    lastModified?: Date | string | null
    lastProcessedLine?: bigint | number
    lastProcessedAt?: Date | string | null
    checksum?: string | null
    project?: ProjectCreateNestedOneWithoutFileStatusInput
    session?: SessionCreateNestedOneWithoutFileStatusInput
    user?: UserCreateNestedOneWithoutFileStatusInput
  }

  export type FileStatusUncheckedCreateInput = {
    filePath: string
    projectId?: string | null
    sessionId?: string | null
    userId?: string | null
    fileSize?: bigint | number | null
    lastModified?: Date | string | null
    lastProcessedLine?: bigint | number
    lastProcessedAt?: Date | string | null
    checksum?: string | null
  }

  export type FileStatusUpdateInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProcessedLine?: BigIntFieldUpdateOperationsInput | bigint | number
    lastProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneWithoutFileStatusNestedInput
    session?: SessionUpdateOneWithoutFileStatusNestedInput
    user?: UserUpdateOneWithoutFileStatusNestedInput
  }

  export type FileStatusUncheckedUpdateInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProcessedLine?: BigIntFieldUpdateOperationsInput | bigint | number
    lastProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileStatusCreateManyInput = {
    filePath: string
    projectId?: string | null
    sessionId?: string | null
    userId?: string | null
    fileSize?: bigint | number | null
    lastModified?: Date | string | null
    lastProcessedLine?: bigint | number
    lastProcessedAt?: Date | string | null
    checksum?: string | null
  }

  export type FileStatusUpdateManyMutationInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProcessedLine?: BigIntFieldUpdateOperationsInput | bigint | number
    lastProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileStatusUncheckedUpdateManyInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProcessedLine?: BigIntFieldUpdateOperationsInput | bigint | number
    lastProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SyncStatusCreateInput = {
    tableName: string
    recordId: string
    operation: string
    localTimestamp?: Date | string
    syncedAt?: Date | string | null
    syncBatchId?: string | null
    syncResponse?: string | null
    retryCount?: number
  }

  export type SyncStatusUncheckedCreateInput = {
    id?: number
    tableName: string
    recordId: string
    operation: string
    localTimestamp?: Date | string
    syncedAt?: Date | string | null
    syncBatchId?: string | null
    syncResponse?: string | null
    retryCount?: number
  }

  export type SyncStatusUpdateInput = {
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    operation?: StringFieldUpdateOperationsInput | string
    localTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncBatchId?: NullableStringFieldUpdateOperationsInput | string | null
    syncResponse?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
  }

  export type SyncStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    operation?: StringFieldUpdateOperationsInput | string
    localTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncBatchId?: NullableStringFieldUpdateOperationsInput | string | null
    syncResponse?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
  }

  export type SyncStatusCreateManyInput = {
    id?: number
    tableName: string
    recordId: string
    operation: string
    localTimestamp?: Date | string
    syncedAt?: Date | string | null
    syncBatchId?: string | null
    syncResponse?: string | null
    retryCount?: number
  }

  export type SyncStatusUpdateManyMutationInput = {
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    operation?: StringFieldUpdateOperationsInput | string
    localTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncBatchId?: NullableStringFieldUpdateOperationsInput | string | null
    syncResponse?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
  }

  export type SyncStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    operation?: StringFieldUpdateOperationsInput | string
    localTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncBatchId?: NullableStringFieldUpdateOperationsInput | string | null
    syncResponse?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type MachineListRelationFilter = {
    every?: MachineWhereInput
    some?: MachineWhereInput
    none?: MachineWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type FileStatusListRelationFilter = {
    every?: FileStatusWhereInput
    some?: FileStatusWhereInput
    none?: FileStatusWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MachineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileStatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type MachineCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineName?: SortOrder
    osInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type MachineAvgOrderByAggregateInput = {
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type MachineMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineName?: SortOrder
    osInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type MachineMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    machineName?: SortOrder
    osInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type MachineSumOrderByAggregateInput = {
    totalProjects?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type MachineScalarRelationFilter = {
    is?: MachineWhereInput
    isNot?: MachineWhereInput
  }

  export type ProjectProjectNameClientMachineIdCompoundUniqueInput = {
    projectName: string
    clientMachineId: string
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    projectName?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    projectName?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    projectName?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    totalSessions?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type ProjectScalarRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    totalMessages?: SortOrder
    totalCost?: SortOrder
    totalInputTokens?: SortOrder
    totalOutputTokens?: SortOrder
    totalCacheCreationTokens?: SortOrder
    totalCacheReadTokens?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SessionScalarRelationFilter = {
    is?: SessionWhereInput
    isNot?: SessionWhereInput
  }

  export type MessageSessionIdMessageIdUuidCompoundUniqueInput = {
    sessionId: string
    messageId: string
    uuid: string
  }

  export type MessageCountOrderByAggregateInput = {
    uuid?: SortOrder
    messageId?: SortOrder
    requestId?: SortOrder
    sessionId?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    timestamp?: SortOrder
    role?: SortOrder
    model?: SortOrder
    type?: SortOrder
    inputTokens?: SortOrder
    outputTokens?: SortOrder
    cacheCreationTokens?: SortOrder
    cacheReadTokens?: SortOrder
    pricePerInputToken?: SortOrder
    pricePerOutputToken?: SortOrder
    pricePerCacheWriteToken?: SortOrder
    pricePerCacheReadToken?: SortOrder
    cacheDurationMinutes?: SortOrder
    messageCost?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    inputTokens?: SortOrder
    outputTokens?: SortOrder
    cacheCreationTokens?: SortOrder
    cacheReadTokens?: SortOrder
    pricePerInputToken?: SortOrder
    pricePerOutputToken?: SortOrder
    pricePerCacheWriteToken?: SortOrder
    pricePerCacheReadToken?: SortOrder
    cacheDurationMinutes?: SortOrder
    messageCost?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    uuid?: SortOrder
    messageId?: SortOrder
    requestId?: SortOrder
    sessionId?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    timestamp?: SortOrder
    role?: SortOrder
    model?: SortOrder
    type?: SortOrder
    inputTokens?: SortOrder
    outputTokens?: SortOrder
    cacheCreationTokens?: SortOrder
    cacheReadTokens?: SortOrder
    pricePerInputToken?: SortOrder
    pricePerOutputToken?: SortOrder
    pricePerCacheWriteToken?: SortOrder
    pricePerCacheReadToken?: SortOrder
    cacheDurationMinutes?: SortOrder
    messageCost?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    uuid?: SortOrder
    messageId?: SortOrder
    requestId?: SortOrder
    sessionId?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    clientMachineId?: SortOrder
    timestamp?: SortOrder
    role?: SortOrder
    model?: SortOrder
    type?: SortOrder
    inputTokens?: SortOrder
    outputTokens?: SortOrder
    cacheCreationTokens?: SortOrder
    cacheReadTokens?: SortOrder
    pricePerInputToken?: SortOrder
    pricePerOutputToken?: SortOrder
    pricePerCacheWriteToken?: SortOrder
    pricePerCacheReadToken?: SortOrder
    cacheDurationMinutes?: SortOrder
    messageCost?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    inputTokens?: SortOrder
    outputTokens?: SortOrder
    cacheCreationTokens?: SortOrder
    cacheReadTokens?: SortOrder
    pricePerInputToken?: SortOrder
    pricePerOutputToken?: SortOrder
    pricePerCacheWriteToken?: SortOrder
    pricePerCacheReadToken?: SortOrder
    cacheDurationMinutes?: SortOrder
    messageCost?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type ProjectNullableScalarRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type SessionNullableScalarRelationFilter = {
    is?: SessionWhereInput | null
    isNot?: SessionWhereInput | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type FileStatusCountOrderByAggregateInput = {
    filePath?: SortOrder
    projectId?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    fileSize?: SortOrder
    lastModified?: SortOrder
    lastProcessedLine?: SortOrder
    lastProcessedAt?: SortOrder
    checksum?: SortOrder
  }

  export type FileStatusAvgOrderByAggregateInput = {
    fileSize?: SortOrder
    lastProcessedLine?: SortOrder
  }

  export type FileStatusMaxOrderByAggregateInput = {
    filePath?: SortOrder
    projectId?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    fileSize?: SortOrder
    lastModified?: SortOrder
    lastProcessedLine?: SortOrder
    lastProcessedAt?: SortOrder
    checksum?: SortOrder
  }

  export type FileStatusMinOrderByAggregateInput = {
    filePath?: SortOrder
    projectId?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    fileSize?: SortOrder
    lastModified?: SortOrder
    lastProcessedLine?: SortOrder
    lastProcessedAt?: SortOrder
    checksum?: SortOrder
  }

  export type FileStatusSumOrderByAggregateInput = {
    fileSize?: SortOrder
    lastProcessedLine?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type SyncStatusTableNameRecordIdCompoundUniqueInput = {
    tableName: string
    recordId: string
  }

  export type SyncStatusCountOrderByAggregateInput = {
    id?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    operation?: SortOrder
    localTimestamp?: SortOrder
    syncedAt?: SortOrder
    syncBatchId?: SortOrder
    syncResponse?: SortOrder
    retryCount?: SortOrder
  }

  export type SyncStatusAvgOrderByAggregateInput = {
    id?: SortOrder
    retryCount?: SortOrder
  }

  export type SyncStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    operation?: SortOrder
    localTimestamp?: SortOrder
    syncedAt?: SortOrder
    syncBatchId?: SortOrder
    syncResponse?: SortOrder
    retryCount?: SortOrder
  }

  export type SyncStatusMinOrderByAggregateInput = {
    id?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    operation?: SortOrder
    localTimestamp?: SortOrder
    syncedAt?: SortOrder
    syncBatchId?: SortOrder
    syncResponse?: SortOrder
    retryCount?: SortOrder
  }

  export type SyncStatusSumOrderByAggregateInput = {
    id?: SortOrder
    retryCount?: SortOrder
  }

  export type MachineCreateNestedManyWithoutUserInput = {
    create?: XOR<MachineCreateWithoutUserInput, MachineUncheckedCreateWithoutUserInput> | MachineCreateWithoutUserInput[] | MachineUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachineCreateOrConnectWithoutUserInput | MachineCreateOrConnectWithoutUserInput[]
    createMany?: MachineCreateManyUserInputEnvelope
    connect?: MachineWhereUniqueInput | MachineWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type FileStatusCreateNestedManyWithoutUserInput = {
    create?: XOR<FileStatusCreateWithoutUserInput, FileStatusUncheckedCreateWithoutUserInput> | FileStatusCreateWithoutUserInput[] | FileStatusUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileStatusCreateOrConnectWithoutUserInput | FileStatusCreateOrConnectWithoutUserInput[]
    createMany?: FileStatusCreateManyUserInputEnvelope
    connect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
  }

  export type MachineUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MachineCreateWithoutUserInput, MachineUncheckedCreateWithoutUserInput> | MachineCreateWithoutUserInput[] | MachineUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachineCreateOrConnectWithoutUserInput | MachineCreateOrConnectWithoutUserInput[]
    createMany?: MachineCreateManyUserInputEnvelope
    connect?: MachineWhereUniqueInput | MachineWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type FileStatusUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FileStatusCreateWithoutUserInput, FileStatusUncheckedCreateWithoutUserInput> | FileStatusCreateWithoutUserInput[] | FileStatusUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileStatusCreateOrConnectWithoutUserInput | FileStatusCreateOrConnectWithoutUserInput[]
    createMany?: FileStatusCreateManyUserInputEnvelope
    connect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type MachineUpdateManyWithoutUserNestedInput = {
    create?: XOR<MachineCreateWithoutUserInput, MachineUncheckedCreateWithoutUserInput> | MachineCreateWithoutUserInput[] | MachineUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachineCreateOrConnectWithoutUserInput | MachineCreateOrConnectWithoutUserInput[]
    upsert?: MachineUpsertWithWhereUniqueWithoutUserInput | MachineUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MachineCreateManyUserInputEnvelope
    set?: MachineWhereUniqueInput | MachineWhereUniqueInput[]
    disconnect?: MachineWhereUniqueInput | MachineWhereUniqueInput[]
    delete?: MachineWhereUniqueInput | MachineWhereUniqueInput[]
    connect?: MachineWhereUniqueInput | MachineWhereUniqueInput[]
    update?: MachineUpdateWithWhereUniqueWithoutUserInput | MachineUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MachineUpdateManyWithWhereWithoutUserInput | MachineUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MachineScalarWhereInput | MachineScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutUserInput | ProjectUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutUserInput | ProjectUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutUserInput | ProjectUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUserInput | MessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUserInput | MessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUserInput | MessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type FileStatusUpdateManyWithoutUserNestedInput = {
    create?: XOR<FileStatusCreateWithoutUserInput, FileStatusUncheckedCreateWithoutUserInput> | FileStatusCreateWithoutUserInput[] | FileStatusUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileStatusCreateOrConnectWithoutUserInput | FileStatusCreateOrConnectWithoutUserInput[]
    upsert?: FileStatusUpsertWithWhereUniqueWithoutUserInput | FileStatusUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FileStatusCreateManyUserInputEnvelope
    set?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    disconnect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    delete?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    connect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    update?: FileStatusUpdateWithWhereUniqueWithoutUserInput | FileStatusUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FileStatusUpdateManyWithWhereWithoutUserInput | FileStatusUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FileStatusScalarWhereInput | FileStatusScalarWhereInput[]
  }

  export type MachineUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MachineCreateWithoutUserInput, MachineUncheckedCreateWithoutUserInput> | MachineCreateWithoutUserInput[] | MachineUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MachineCreateOrConnectWithoutUserInput | MachineCreateOrConnectWithoutUserInput[]
    upsert?: MachineUpsertWithWhereUniqueWithoutUserInput | MachineUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MachineCreateManyUserInputEnvelope
    set?: MachineWhereUniqueInput | MachineWhereUniqueInput[]
    disconnect?: MachineWhereUniqueInput | MachineWhereUniqueInput[]
    delete?: MachineWhereUniqueInput | MachineWhereUniqueInput[]
    connect?: MachineWhereUniqueInput | MachineWhereUniqueInput[]
    update?: MachineUpdateWithWhereUniqueWithoutUserInput | MachineUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MachineUpdateManyWithWhereWithoutUserInput | MachineUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MachineScalarWhereInput | MachineScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutUserInput | ProjectUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutUserInput | ProjectUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutUserInput | ProjectUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUserInput | MessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUserInput | MessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUserInput | MessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type FileStatusUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FileStatusCreateWithoutUserInput, FileStatusUncheckedCreateWithoutUserInput> | FileStatusCreateWithoutUserInput[] | FileStatusUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileStatusCreateOrConnectWithoutUserInput | FileStatusCreateOrConnectWithoutUserInput[]
    upsert?: FileStatusUpsertWithWhereUniqueWithoutUserInput | FileStatusUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FileStatusCreateManyUserInputEnvelope
    set?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    disconnect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    delete?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    connect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    update?: FileStatusUpdateWithWhereUniqueWithoutUserInput | FileStatusUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FileStatusUpdateManyWithWhereWithoutUserInput | FileStatusUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FileStatusScalarWhereInput | FileStatusScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMachinesInput = {
    create?: XOR<UserCreateWithoutMachinesInput, UserUncheckedCreateWithoutMachinesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMachinesInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedManyWithoutMachineInput = {
    create?: XOR<ProjectCreateWithoutMachineInput, ProjectUncheckedCreateWithoutMachineInput> | ProjectCreateWithoutMachineInput[] | ProjectUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutMachineInput | ProjectCreateOrConnectWithoutMachineInput[]
    createMany?: ProjectCreateManyMachineInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutMachineInput = {
    create?: XOR<SessionCreateWithoutMachineInput, SessionUncheckedCreateWithoutMachineInput> | SessionCreateWithoutMachineInput[] | SessionUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutMachineInput | SessionCreateOrConnectWithoutMachineInput[]
    createMany?: SessionCreateManyMachineInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutMachineInput = {
    create?: XOR<MessageCreateWithoutMachineInput, MessageUncheckedCreateWithoutMachineInput> | MessageCreateWithoutMachineInput[] | MessageUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutMachineInput | MessageCreateOrConnectWithoutMachineInput[]
    createMany?: MessageCreateManyMachineInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutMachineInput = {
    create?: XOR<ProjectCreateWithoutMachineInput, ProjectUncheckedCreateWithoutMachineInput> | ProjectCreateWithoutMachineInput[] | ProjectUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutMachineInput | ProjectCreateOrConnectWithoutMachineInput[]
    createMany?: ProjectCreateManyMachineInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutMachineInput = {
    create?: XOR<SessionCreateWithoutMachineInput, SessionUncheckedCreateWithoutMachineInput> | SessionCreateWithoutMachineInput[] | SessionUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutMachineInput | SessionCreateOrConnectWithoutMachineInput[]
    createMany?: SessionCreateManyMachineInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutMachineInput = {
    create?: XOR<MessageCreateWithoutMachineInput, MessageUncheckedCreateWithoutMachineInput> | MessageCreateWithoutMachineInput[] | MessageUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutMachineInput | MessageCreateOrConnectWithoutMachineInput[]
    createMany?: MessageCreateManyMachineInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutMachinesNestedInput = {
    create?: XOR<UserCreateWithoutMachinesInput, UserUncheckedCreateWithoutMachinesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMachinesInput
    upsert?: UserUpsertWithoutMachinesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMachinesInput, UserUpdateWithoutMachinesInput>, UserUncheckedUpdateWithoutMachinesInput>
  }

  export type ProjectUpdateManyWithoutMachineNestedInput = {
    create?: XOR<ProjectCreateWithoutMachineInput, ProjectUncheckedCreateWithoutMachineInput> | ProjectCreateWithoutMachineInput[] | ProjectUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutMachineInput | ProjectCreateOrConnectWithoutMachineInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutMachineInput | ProjectUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: ProjectCreateManyMachineInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutMachineInput | ProjectUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutMachineInput | ProjectUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutMachineNestedInput = {
    create?: XOR<SessionCreateWithoutMachineInput, SessionUncheckedCreateWithoutMachineInput> | SessionCreateWithoutMachineInput[] | SessionUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutMachineInput | SessionCreateOrConnectWithoutMachineInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutMachineInput | SessionUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: SessionCreateManyMachineInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutMachineInput | SessionUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutMachineInput | SessionUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutMachineNestedInput = {
    create?: XOR<MessageCreateWithoutMachineInput, MessageUncheckedCreateWithoutMachineInput> | MessageCreateWithoutMachineInput[] | MessageUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutMachineInput | MessageCreateOrConnectWithoutMachineInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutMachineInput | MessageUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: MessageCreateManyMachineInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutMachineInput | MessageUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutMachineInput | MessageUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutMachineNestedInput = {
    create?: XOR<ProjectCreateWithoutMachineInput, ProjectUncheckedCreateWithoutMachineInput> | ProjectCreateWithoutMachineInput[] | ProjectUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutMachineInput | ProjectCreateOrConnectWithoutMachineInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutMachineInput | ProjectUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: ProjectCreateManyMachineInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutMachineInput | ProjectUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutMachineInput | ProjectUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutMachineNestedInput = {
    create?: XOR<SessionCreateWithoutMachineInput, SessionUncheckedCreateWithoutMachineInput> | SessionCreateWithoutMachineInput[] | SessionUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutMachineInput | SessionCreateOrConnectWithoutMachineInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutMachineInput | SessionUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: SessionCreateManyMachineInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutMachineInput | SessionUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutMachineInput | SessionUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutMachineNestedInput = {
    create?: XOR<MessageCreateWithoutMachineInput, MessageUncheckedCreateWithoutMachineInput> | MessageCreateWithoutMachineInput[] | MessageUncheckedCreateWithoutMachineInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutMachineInput | MessageCreateOrConnectWithoutMachineInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutMachineInput | MessageUpsertWithWhereUniqueWithoutMachineInput[]
    createMany?: MessageCreateManyMachineInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutMachineInput | MessageUpdateWithWhereUniqueWithoutMachineInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutMachineInput | MessageUpdateManyWithWhereWithoutMachineInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type MachineCreateNestedOneWithoutProjectsInput = {
    create?: XOR<MachineCreateWithoutProjectsInput, MachineUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: MachineCreateOrConnectWithoutProjectsInput
    connect?: MachineWhereUniqueInput
  }

  export type SessionCreateNestedManyWithoutProjectInput = {
    create?: XOR<SessionCreateWithoutProjectInput, SessionUncheckedCreateWithoutProjectInput> | SessionCreateWithoutProjectInput[] | SessionUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutProjectInput | SessionCreateOrConnectWithoutProjectInput[]
    createMany?: SessionCreateManyProjectInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutProjectInput = {
    create?: XOR<MessageCreateWithoutProjectInput, MessageUncheckedCreateWithoutProjectInput> | MessageCreateWithoutProjectInput[] | MessageUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutProjectInput | MessageCreateOrConnectWithoutProjectInput[]
    createMany?: MessageCreateManyProjectInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type FileStatusCreateNestedManyWithoutProjectInput = {
    create?: XOR<FileStatusCreateWithoutProjectInput, FileStatusUncheckedCreateWithoutProjectInput> | FileStatusCreateWithoutProjectInput[] | FileStatusUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FileStatusCreateOrConnectWithoutProjectInput | FileStatusCreateOrConnectWithoutProjectInput[]
    createMany?: FileStatusCreateManyProjectInputEnvelope
    connect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<SessionCreateWithoutProjectInput, SessionUncheckedCreateWithoutProjectInput> | SessionCreateWithoutProjectInput[] | SessionUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutProjectInput | SessionCreateOrConnectWithoutProjectInput[]
    createMany?: SessionCreateManyProjectInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<MessageCreateWithoutProjectInput, MessageUncheckedCreateWithoutProjectInput> | MessageCreateWithoutProjectInput[] | MessageUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutProjectInput | MessageCreateOrConnectWithoutProjectInput[]
    createMany?: MessageCreateManyProjectInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type FileStatusUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<FileStatusCreateWithoutProjectInput, FileStatusUncheckedCreateWithoutProjectInput> | FileStatusCreateWithoutProjectInput[] | FileStatusUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FileStatusCreateOrConnectWithoutProjectInput | FileStatusCreateOrConnectWithoutProjectInput[]
    createMany?: FileStatusCreateManyProjectInputEnvelope
    connect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    upsert?: UserUpsertWithoutProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectsInput, UserUpdateWithoutProjectsInput>, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type MachineUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<MachineCreateWithoutProjectsInput, MachineUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: MachineCreateOrConnectWithoutProjectsInput
    upsert?: MachineUpsertWithoutProjectsInput
    connect?: MachineWhereUniqueInput
    update?: XOR<XOR<MachineUpdateToOneWithWhereWithoutProjectsInput, MachineUpdateWithoutProjectsInput>, MachineUncheckedUpdateWithoutProjectsInput>
  }

  export type SessionUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SessionCreateWithoutProjectInput, SessionUncheckedCreateWithoutProjectInput> | SessionCreateWithoutProjectInput[] | SessionUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutProjectInput | SessionCreateOrConnectWithoutProjectInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutProjectInput | SessionUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SessionCreateManyProjectInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutProjectInput | SessionUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutProjectInput | SessionUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutProjectNestedInput = {
    create?: XOR<MessageCreateWithoutProjectInput, MessageUncheckedCreateWithoutProjectInput> | MessageCreateWithoutProjectInput[] | MessageUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutProjectInput | MessageCreateOrConnectWithoutProjectInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutProjectInput | MessageUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: MessageCreateManyProjectInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutProjectInput | MessageUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutProjectInput | MessageUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type FileStatusUpdateManyWithoutProjectNestedInput = {
    create?: XOR<FileStatusCreateWithoutProjectInput, FileStatusUncheckedCreateWithoutProjectInput> | FileStatusCreateWithoutProjectInput[] | FileStatusUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FileStatusCreateOrConnectWithoutProjectInput | FileStatusCreateOrConnectWithoutProjectInput[]
    upsert?: FileStatusUpsertWithWhereUniqueWithoutProjectInput | FileStatusUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: FileStatusCreateManyProjectInputEnvelope
    set?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    disconnect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    delete?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    connect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    update?: FileStatusUpdateWithWhereUniqueWithoutProjectInput | FileStatusUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: FileStatusUpdateManyWithWhereWithoutProjectInput | FileStatusUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: FileStatusScalarWhereInput | FileStatusScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SessionCreateWithoutProjectInput, SessionUncheckedCreateWithoutProjectInput> | SessionCreateWithoutProjectInput[] | SessionUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutProjectInput | SessionCreateOrConnectWithoutProjectInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutProjectInput | SessionUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SessionCreateManyProjectInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutProjectInput | SessionUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutProjectInput | SessionUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<MessageCreateWithoutProjectInput, MessageUncheckedCreateWithoutProjectInput> | MessageCreateWithoutProjectInput[] | MessageUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutProjectInput | MessageCreateOrConnectWithoutProjectInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutProjectInput | MessageUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: MessageCreateManyProjectInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutProjectInput | MessageUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutProjectInput | MessageUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type FileStatusUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<FileStatusCreateWithoutProjectInput, FileStatusUncheckedCreateWithoutProjectInput> | FileStatusCreateWithoutProjectInput[] | FileStatusUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FileStatusCreateOrConnectWithoutProjectInput | FileStatusCreateOrConnectWithoutProjectInput[]
    upsert?: FileStatusUpsertWithWhereUniqueWithoutProjectInput | FileStatusUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: FileStatusCreateManyProjectInputEnvelope
    set?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    disconnect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    delete?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    connect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    update?: FileStatusUpdateWithWhereUniqueWithoutProjectInput | FileStatusUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: FileStatusUpdateManyWithWhereWithoutProjectInput | FileStatusUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: FileStatusScalarWhereInput | FileStatusScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutSessionsInput = {
    create?: XOR<ProjectCreateWithoutSessionsInput, ProjectUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSessionsInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type MachineCreateNestedOneWithoutSessionsInput = {
    create?: XOR<MachineCreateWithoutSessionsInput, MachineUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: MachineCreateOrConnectWithoutSessionsInput
    connect?: MachineWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutSessionInput = {
    create?: XOR<MessageCreateWithoutSessionInput, MessageUncheckedCreateWithoutSessionInput> | MessageCreateWithoutSessionInput[] | MessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSessionInput | MessageCreateOrConnectWithoutSessionInput[]
    createMany?: MessageCreateManySessionInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type FileStatusCreateNestedManyWithoutSessionInput = {
    create?: XOR<FileStatusCreateWithoutSessionInput, FileStatusUncheckedCreateWithoutSessionInput> | FileStatusCreateWithoutSessionInput[] | FileStatusUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: FileStatusCreateOrConnectWithoutSessionInput | FileStatusCreateOrConnectWithoutSessionInput[]
    createMany?: FileStatusCreateManySessionInputEnvelope
    connect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<MessageCreateWithoutSessionInput, MessageUncheckedCreateWithoutSessionInput> | MessageCreateWithoutSessionInput[] | MessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSessionInput | MessageCreateOrConnectWithoutSessionInput[]
    createMany?: MessageCreateManySessionInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type FileStatusUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<FileStatusCreateWithoutSessionInput, FileStatusUncheckedCreateWithoutSessionInput> | FileStatusCreateWithoutSessionInput[] | FileStatusUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: FileStatusCreateOrConnectWithoutSessionInput | FileStatusCreateOrConnectWithoutSessionInput[]
    createMany?: FileStatusCreateManySessionInputEnvelope
    connect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
  }

  export type ProjectUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<ProjectCreateWithoutSessionsInput, ProjectUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSessionsInput
    upsert?: ProjectUpsertWithoutSessionsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutSessionsInput, ProjectUpdateWithoutSessionsInput>, ProjectUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type MachineUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<MachineCreateWithoutSessionsInput, MachineUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: MachineCreateOrConnectWithoutSessionsInput
    upsert?: MachineUpsertWithoutSessionsInput
    connect?: MachineWhereUniqueInput
    update?: XOR<XOR<MachineUpdateToOneWithWhereWithoutSessionsInput, MachineUpdateWithoutSessionsInput>, MachineUncheckedUpdateWithoutSessionsInput>
  }

  export type MessageUpdateManyWithoutSessionNestedInput = {
    create?: XOR<MessageCreateWithoutSessionInput, MessageUncheckedCreateWithoutSessionInput> | MessageCreateWithoutSessionInput[] | MessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSessionInput | MessageCreateOrConnectWithoutSessionInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSessionInput | MessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: MessageCreateManySessionInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSessionInput | MessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSessionInput | MessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type FileStatusUpdateManyWithoutSessionNestedInput = {
    create?: XOR<FileStatusCreateWithoutSessionInput, FileStatusUncheckedCreateWithoutSessionInput> | FileStatusCreateWithoutSessionInput[] | FileStatusUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: FileStatusCreateOrConnectWithoutSessionInput | FileStatusCreateOrConnectWithoutSessionInput[]
    upsert?: FileStatusUpsertWithWhereUniqueWithoutSessionInput | FileStatusUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: FileStatusCreateManySessionInputEnvelope
    set?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    disconnect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    delete?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    connect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    update?: FileStatusUpdateWithWhereUniqueWithoutSessionInput | FileStatusUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: FileStatusUpdateManyWithWhereWithoutSessionInput | FileStatusUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: FileStatusScalarWhereInput | FileStatusScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<MessageCreateWithoutSessionInput, MessageUncheckedCreateWithoutSessionInput> | MessageCreateWithoutSessionInput[] | MessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSessionInput | MessageCreateOrConnectWithoutSessionInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSessionInput | MessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: MessageCreateManySessionInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSessionInput | MessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSessionInput | MessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type FileStatusUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<FileStatusCreateWithoutSessionInput, FileStatusUncheckedCreateWithoutSessionInput> | FileStatusCreateWithoutSessionInput[] | FileStatusUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: FileStatusCreateOrConnectWithoutSessionInput | FileStatusCreateOrConnectWithoutSessionInput[]
    upsert?: FileStatusUpsertWithWhereUniqueWithoutSessionInput | FileStatusUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: FileStatusCreateManySessionInputEnvelope
    set?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    disconnect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    delete?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    connect?: FileStatusWhereUniqueInput | FileStatusWhereUniqueInput[]
    update?: FileStatusUpdateWithWhereUniqueWithoutSessionInput | FileStatusUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: FileStatusUpdateManyWithWhereWithoutSessionInput | FileStatusUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: FileStatusScalarWhereInput | FileStatusScalarWhereInput[]
  }

  export type SessionCreateNestedOneWithoutMessagesInput = {
    create?: XOR<SessionCreateWithoutMessagesInput, SessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: SessionCreateOrConnectWithoutMessagesInput
    connect?: SessionWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ProjectCreateWithoutMessagesInput, ProjectUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMessagesInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type MachineCreateNestedOneWithoutMessagesInput = {
    create?: XOR<MachineCreateWithoutMessagesInput, MachineUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: MachineCreateOrConnectWithoutMessagesInput
    connect?: MachineWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<SessionCreateWithoutMessagesInput, SessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: SessionCreateOrConnectWithoutMessagesInput
    upsert?: SessionUpsertWithoutMessagesInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutMessagesInput, SessionUpdateWithoutMessagesInput>, SessionUncheckedUpdateWithoutMessagesInput>
  }

  export type ProjectUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ProjectCreateWithoutMessagesInput, ProjectUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMessagesInput
    upsert?: ProjectUpsertWithoutMessagesInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutMessagesInput, ProjectUpdateWithoutMessagesInput>, ProjectUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesInput, UserUpdateWithoutMessagesInput>, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type MachineUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<MachineCreateWithoutMessagesInput, MachineUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: MachineCreateOrConnectWithoutMessagesInput
    upsert?: MachineUpsertWithoutMessagesInput
    connect?: MachineWhereUniqueInput
    update?: XOR<XOR<MachineUpdateToOneWithWhereWithoutMessagesInput, MachineUpdateWithoutMessagesInput>, MachineUncheckedUpdateWithoutMessagesInput>
  }

  export type ProjectCreateNestedOneWithoutFileStatusInput = {
    create?: XOR<ProjectCreateWithoutFileStatusInput, ProjectUncheckedCreateWithoutFileStatusInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutFileStatusInput
    connect?: ProjectWhereUniqueInput
  }

  export type SessionCreateNestedOneWithoutFileStatusInput = {
    create?: XOR<SessionCreateWithoutFileStatusInput, SessionUncheckedCreateWithoutFileStatusInput>
    connectOrCreate?: SessionCreateOrConnectWithoutFileStatusInput
    connect?: SessionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFileStatusInput = {
    create?: XOR<UserCreateWithoutFileStatusInput, UserUncheckedCreateWithoutFileStatusInput>
    connectOrCreate?: UserCreateOrConnectWithoutFileStatusInput
    connect?: UserWhereUniqueInput
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type ProjectUpdateOneWithoutFileStatusNestedInput = {
    create?: XOR<ProjectCreateWithoutFileStatusInput, ProjectUncheckedCreateWithoutFileStatusInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutFileStatusInput
    upsert?: ProjectUpsertWithoutFileStatusInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutFileStatusInput, ProjectUpdateWithoutFileStatusInput>, ProjectUncheckedUpdateWithoutFileStatusInput>
  }

  export type SessionUpdateOneWithoutFileStatusNestedInput = {
    create?: XOR<SessionCreateWithoutFileStatusInput, SessionUncheckedCreateWithoutFileStatusInput>
    connectOrCreate?: SessionCreateOrConnectWithoutFileStatusInput
    upsert?: SessionUpsertWithoutFileStatusInput
    disconnect?: SessionWhereInput | boolean
    delete?: SessionWhereInput | boolean
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutFileStatusInput, SessionUpdateWithoutFileStatusInput>, SessionUncheckedUpdateWithoutFileStatusInput>
  }

  export type UserUpdateOneWithoutFileStatusNestedInput = {
    create?: XOR<UserCreateWithoutFileStatusInput, UserUncheckedCreateWithoutFileStatusInput>
    connectOrCreate?: UserCreateOrConnectWithoutFileStatusInput
    upsert?: UserUpsertWithoutFileStatusInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFileStatusInput, UserUpdateWithoutFileStatusInput>, UserUncheckedUpdateWithoutFileStatusInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type MachineCreateWithoutUserInput = {
    id: string
    machineName?: string | null
    osInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    projects?: ProjectCreateNestedManyWithoutMachineInput
    sessions?: SessionCreateNestedManyWithoutMachineInput
    messages?: MessageCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateWithoutUserInput = {
    id: string
    machineName?: string | null
    osInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    projects?: ProjectUncheckedCreateNestedManyWithoutMachineInput
    sessions?: SessionUncheckedCreateNestedManyWithoutMachineInput
    messages?: MessageUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineCreateOrConnectWithoutUserInput = {
    where: MachineWhereUniqueInput
    create: XOR<MachineCreateWithoutUserInput, MachineUncheckedCreateWithoutUserInput>
  }

  export type MachineCreateManyUserInputEnvelope = {
    data: MachineCreateManyUserInput | MachineCreateManyUserInput[]
  }

  export type ProjectCreateWithoutUserInput = {
    id: string
    projectName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    machine: MachineCreateNestedOneWithoutProjectsInput
    sessions?: SessionCreateNestedManyWithoutProjectInput
    messages?: MessageCreateNestedManyWithoutProjectInput
    fileStatus?: FileStatusCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutUserInput = {
    id: string
    projectName: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    sessions?: SessionUncheckedCreateNestedManyWithoutProjectInput
    messages?: MessageUncheckedCreateNestedManyWithoutProjectInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutUserInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
  }

  export type ProjectCreateManyUserInputEnvelope = {
    data: ProjectCreateManyUserInput | ProjectCreateManyUserInput[]
  }

  export type SessionCreateWithoutUserInput = {
    id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    project: ProjectCreateNestedOneWithoutSessionsInput
    machine: MachineCreateNestedOneWithoutSessionsInput
    messages?: MessageCreateNestedManyWithoutSessionInput
    fileStatus?: FileStatusCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id: string
    projectId: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    messages?: MessageUncheckedCreateNestedManyWithoutSessionInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
  }

  export type MessageCreateWithoutUserInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
    session: SessionCreateNestedOneWithoutMessagesInput
    project: ProjectCreateNestedOneWithoutMessagesInput
    machine: MachineCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutUserInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    sessionId: string
    projectId: string
    clientMachineId: string
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
  }

  export type MessageCreateOrConnectWithoutUserInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput>
  }

  export type MessageCreateManyUserInputEnvelope = {
    data: MessageCreateManyUserInput | MessageCreateManyUserInput[]
  }

  export type FileStatusCreateWithoutUserInput = {
    filePath: string
    fileSize?: bigint | number | null
    lastModified?: Date | string | null
    lastProcessedLine?: bigint | number
    lastProcessedAt?: Date | string | null
    checksum?: string | null
    project?: ProjectCreateNestedOneWithoutFileStatusInput
    session?: SessionCreateNestedOneWithoutFileStatusInput
  }

  export type FileStatusUncheckedCreateWithoutUserInput = {
    filePath: string
    projectId?: string | null
    sessionId?: string | null
    fileSize?: bigint | number | null
    lastModified?: Date | string | null
    lastProcessedLine?: bigint | number
    lastProcessedAt?: Date | string | null
    checksum?: string | null
  }

  export type FileStatusCreateOrConnectWithoutUserInput = {
    where: FileStatusWhereUniqueInput
    create: XOR<FileStatusCreateWithoutUserInput, FileStatusUncheckedCreateWithoutUserInput>
  }

  export type FileStatusCreateManyUserInputEnvelope = {
    data: FileStatusCreateManyUserInput | FileStatusCreateManyUserInput[]
  }

  export type MachineUpsertWithWhereUniqueWithoutUserInput = {
    where: MachineWhereUniqueInput
    update: XOR<MachineUpdateWithoutUserInput, MachineUncheckedUpdateWithoutUserInput>
    create: XOR<MachineCreateWithoutUserInput, MachineUncheckedCreateWithoutUserInput>
  }

  export type MachineUpdateWithWhereUniqueWithoutUserInput = {
    where: MachineWhereUniqueInput
    data: XOR<MachineUpdateWithoutUserInput, MachineUncheckedUpdateWithoutUserInput>
  }

  export type MachineUpdateManyWithWhereWithoutUserInput = {
    where: MachineScalarWhereInput
    data: XOR<MachineUpdateManyMutationInput, MachineUncheckedUpdateManyWithoutUserInput>
  }

  export type MachineScalarWhereInput = {
    AND?: MachineScalarWhereInput | MachineScalarWhereInput[]
    OR?: MachineScalarWhereInput[]
    NOT?: MachineScalarWhereInput | MachineScalarWhereInput[]
    id?: StringFilter<"Machine"> | string
    userId?: StringFilter<"Machine"> | string
    machineName?: StringNullableFilter<"Machine"> | string | null
    osInfo?: StringNullableFilter<"Machine"> | string | null
    createdAt?: DateTimeFilter<"Machine"> | Date | string
    updatedAt?: DateTimeFilter<"Machine"> | Date | string
    totalProjects?: IntFilter<"Machine"> | number
    totalSessions?: IntFilter<"Machine"> | number
    totalMessages?: BigIntFilter<"Machine"> | bigint | number
    totalCost?: DecimalFilter<"Machine"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFilter<"Machine"> | bigint | number
    totalOutputTokens?: BigIntFilter<"Machine"> | bigint | number
    totalCacheCreationTokens?: BigIntFilter<"Machine"> | bigint | number
    totalCacheReadTokens?: BigIntFilter<"Machine"> | bigint | number
  }

  export type ProjectUpsertWithWhereUniqueWithoutUserInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutUserInput, ProjectUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutUserInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutUserInput, ProjectUncheckedUpdateWithoutUserInput>
  }

  export type ProjectUpdateManyWithWhereWithoutUserInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutUserInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    projectName?: StringFilter<"Project"> | string
    userId?: StringFilter<"Project"> | string
    clientMachineId?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    totalSessions?: IntFilter<"Project"> | number
    totalMessages?: BigIntFilter<"Project"> | bigint | number
    totalCost?: DecimalFilter<"Project"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFilter<"Project"> | bigint | number
    totalOutputTokens?: BigIntFilter<"Project"> | bigint | number
    totalCacheCreationTokens?: BigIntFilter<"Project"> | bigint | number
    totalCacheReadTokens?: BigIntFilter<"Project"> | bigint | number
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    projectId?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    clientMachineId?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    totalMessages?: BigIntFilter<"Session"> | bigint | number
    totalCost?: DecimalFilter<"Session"> | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFilter<"Session"> | bigint | number
    totalOutputTokens?: BigIntFilter<"Session"> | bigint | number
    totalCacheCreationTokens?: BigIntFilter<"Session"> | bigint | number
    totalCacheReadTokens?: BigIntFilter<"Session"> | bigint | number
  }

  export type MessageUpsertWithWhereUniqueWithoutUserInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutUserInput, MessageUncheckedUpdateWithoutUserInput>
    create: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutUserInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutUserInput, MessageUncheckedUpdateWithoutUserInput>
  }

  export type MessageUpdateManyWithWhereWithoutUserInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutUserInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    uuid?: StringFilter<"Message"> | string
    messageId?: StringFilter<"Message"> | string
    requestId?: StringNullableFilter<"Message"> | string | null
    sessionId?: StringFilter<"Message"> | string
    projectId?: StringFilter<"Message"> | string
    userId?: StringFilter<"Message"> | string
    clientMachineId?: StringFilter<"Message"> | string
    timestamp?: DateTimeNullableFilter<"Message"> | Date | string | null
    role?: StringFilter<"Message"> | string
    model?: StringNullableFilter<"Message"> | string | null
    type?: StringNullableFilter<"Message"> | string | null
    inputTokens?: BigIntFilter<"Message"> | bigint | number
    outputTokens?: BigIntFilter<"Message"> | bigint | number
    cacheCreationTokens?: BigIntFilter<"Message"> | bigint | number
    cacheReadTokens?: BigIntFilter<"Message"> | bigint | number
    pricePerInputToken?: DecimalNullableFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: DecimalNullableFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: DecimalNullableFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: DecimalNullableFilter<"Message"> | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: IntNullableFilter<"Message"> | number | null
    messageCost?: DecimalFilter<"Message"> | Decimal | DecimalJsLike | number | string
  }

  export type FileStatusUpsertWithWhereUniqueWithoutUserInput = {
    where: FileStatusWhereUniqueInput
    update: XOR<FileStatusUpdateWithoutUserInput, FileStatusUncheckedUpdateWithoutUserInput>
    create: XOR<FileStatusCreateWithoutUserInput, FileStatusUncheckedCreateWithoutUserInput>
  }

  export type FileStatusUpdateWithWhereUniqueWithoutUserInput = {
    where: FileStatusWhereUniqueInput
    data: XOR<FileStatusUpdateWithoutUserInput, FileStatusUncheckedUpdateWithoutUserInput>
  }

  export type FileStatusUpdateManyWithWhereWithoutUserInput = {
    where: FileStatusScalarWhereInput
    data: XOR<FileStatusUpdateManyMutationInput, FileStatusUncheckedUpdateManyWithoutUserInput>
  }

  export type FileStatusScalarWhereInput = {
    AND?: FileStatusScalarWhereInput | FileStatusScalarWhereInput[]
    OR?: FileStatusScalarWhereInput[]
    NOT?: FileStatusScalarWhereInput | FileStatusScalarWhereInput[]
    filePath?: StringFilter<"FileStatus"> | string
    projectId?: StringNullableFilter<"FileStatus"> | string | null
    sessionId?: StringNullableFilter<"FileStatus"> | string | null
    userId?: StringNullableFilter<"FileStatus"> | string | null
    fileSize?: BigIntNullableFilter<"FileStatus"> | bigint | number | null
    lastModified?: DateTimeNullableFilter<"FileStatus"> | Date | string | null
    lastProcessedLine?: BigIntFilter<"FileStatus"> | bigint | number
    lastProcessedAt?: DateTimeNullableFilter<"FileStatus"> | Date | string | null
    checksum?: StringNullableFilter<"FileStatus"> | string | null
  }

  export type UserCreateWithoutMachinesInput = {
    id: string
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    projects?: ProjectCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    fileStatus?: FileStatusCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMachinesInput = {
    id: string
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMachinesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMachinesInput, UserUncheckedCreateWithoutMachinesInput>
  }

  export type ProjectCreateWithoutMachineInput = {
    id: string
    projectName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    user: UserCreateNestedOneWithoutProjectsInput
    sessions?: SessionCreateNestedManyWithoutProjectInput
    messages?: MessageCreateNestedManyWithoutProjectInput
    fileStatus?: FileStatusCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutMachineInput = {
    id: string
    projectName: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    sessions?: SessionUncheckedCreateNestedManyWithoutProjectInput
    messages?: MessageUncheckedCreateNestedManyWithoutProjectInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutMachineInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutMachineInput, ProjectUncheckedCreateWithoutMachineInput>
  }

  export type ProjectCreateManyMachineInputEnvelope = {
    data: ProjectCreateManyMachineInput | ProjectCreateManyMachineInput[]
  }

  export type SessionCreateWithoutMachineInput = {
    id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    project: ProjectCreateNestedOneWithoutSessionsInput
    user: UserCreateNestedOneWithoutSessionsInput
    messages?: MessageCreateNestedManyWithoutSessionInput
    fileStatus?: FileStatusCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateWithoutMachineInput = {
    id: string
    projectId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    messages?: MessageUncheckedCreateNestedManyWithoutSessionInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutMachineInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutMachineInput, SessionUncheckedCreateWithoutMachineInput>
  }

  export type SessionCreateManyMachineInputEnvelope = {
    data: SessionCreateManyMachineInput | SessionCreateManyMachineInput[]
  }

  export type MessageCreateWithoutMachineInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
    session: SessionCreateNestedOneWithoutMessagesInput
    project: ProjectCreateNestedOneWithoutMessagesInput
    user: UserCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutMachineInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    sessionId: string
    projectId: string
    userId: string
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
  }

  export type MessageCreateOrConnectWithoutMachineInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutMachineInput, MessageUncheckedCreateWithoutMachineInput>
  }

  export type MessageCreateManyMachineInputEnvelope = {
    data: MessageCreateManyMachineInput | MessageCreateManyMachineInput[]
  }

  export type UserUpsertWithoutMachinesInput = {
    update: XOR<UserUpdateWithoutMachinesInput, UserUncheckedUpdateWithoutMachinesInput>
    create: XOR<UserCreateWithoutMachinesInput, UserUncheckedCreateWithoutMachinesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMachinesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMachinesInput, UserUncheckedUpdateWithoutMachinesInput>
  }

  export type UserUpdateWithoutMachinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    projects?: ProjectUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    fileStatus?: FileStatusUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMachinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithWhereUniqueWithoutMachineInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutMachineInput, ProjectUncheckedUpdateWithoutMachineInput>
    create: XOR<ProjectCreateWithoutMachineInput, ProjectUncheckedCreateWithoutMachineInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutMachineInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutMachineInput, ProjectUncheckedUpdateWithoutMachineInput>
  }

  export type ProjectUpdateManyWithWhereWithoutMachineInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutMachineInput>
  }

  export type SessionUpsertWithWhereUniqueWithoutMachineInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutMachineInput, SessionUncheckedUpdateWithoutMachineInput>
    create: XOR<SessionCreateWithoutMachineInput, SessionUncheckedCreateWithoutMachineInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutMachineInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutMachineInput, SessionUncheckedUpdateWithoutMachineInput>
  }

  export type SessionUpdateManyWithWhereWithoutMachineInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutMachineInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutMachineInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutMachineInput, MessageUncheckedUpdateWithoutMachineInput>
    create: XOR<MessageCreateWithoutMachineInput, MessageUncheckedCreateWithoutMachineInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutMachineInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutMachineInput, MessageUncheckedUpdateWithoutMachineInput>
  }

  export type MessageUpdateManyWithWhereWithoutMachineInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutMachineInput>
  }

  export type UserCreateWithoutProjectsInput = {
    id: string
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    machines?: MachineCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    fileStatus?: FileStatusCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    id: string
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    machines?: MachineUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type MachineCreateWithoutProjectsInput = {
    id: string
    machineName?: string | null
    osInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    user: UserCreateNestedOneWithoutMachinesInput
    sessions?: SessionCreateNestedManyWithoutMachineInput
    messages?: MessageCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateWithoutProjectsInput = {
    id: string
    userId: string
    machineName?: string | null
    osInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    sessions?: SessionUncheckedCreateNestedManyWithoutMachineInput
    messages?: MessageUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineCreateOrConnectWithoutProjectsInput = {
    where: MachineWhereUniqueInput
    create: XOR<MachineCreateWithoutProjectsInput, MachineUncheckedCreateWithoutProjectsInput>
  }

  export type SessionCreateWithoutProjectInput = {
    id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    user: UserCreateNestedOneWithoutSessionsInput
    machine: MachineCreateNestedOneWithoutSessionsInput
    messages?: MessageCreateNestedManyWithoutSessionInput
    fileStatus?: FileStatusCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateWithoutProjectInput = {
    id: string
    userId: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    messages?: MessageUncheckedCreateNestedManyWithoutSessionInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutProjectInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutProjectInput, SessionUncheckedCreateWithoutProjectInput>
  }

  export type SessionCreateManyProjectInputEnvelope = {
    data: SessionCreateManyProjectInput | SessionCreateManyProjectInput[]
  }

  export type MessageCreateWithoutProjectInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
    session: SessionCreateNestedOneWithoutMessagesInput
    user: UserCreateNestedOneWithoutMessagesInput
    machine: MachineCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutProjectInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    sessionId: string
    userId: string
    clientMachineId: string
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
  }

  export type MessageCreateOrConnectWithoutProjectInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutProjectInput, MessageUncheckedCreateWithoutProjectInput>
  }

  export type MessageCreateManyProjectInputEnvelope = {
    data: MessageCreateManyProjectInput | MessageCreateManyProjectInput[]
  }

  export type FileStatusCreateWithoutProjectInput = {
    filePath: string
    fileSize?: bigint | number | null
    lastModified?: Date | string | null
    lastProcessedLine?: bigint | number
    lastProcessedAt?: Date | string | null
    checksum?: string | null
    session?: SessionCreateNestedOneWithoutFileStatusInput
    user?: UserCreateNestedOneWithoutFileStatusInput
  }

  export type FileStatusUncheckedCreateWithoutProjectInput = {
    filePath: string
    sessionId?: string | null
    userId?: string | null
    fileSize?: bigint | number | null
    lastModified?: Date | string | null
    lastProcessedLine?: bigint | number
    lastProcessedAt?: Date | string | null
    checksum?: string | null
  }

  export type FileStatusCreateOrConnectWithoutProjectInput = {
    where: FileStatusWhereUniqueInput
    create: XOR<FileStatusCreateWithoutProjectInput, FileStatusUncheckedCreateWithoutProjectInput>
  }

  export type FileStatusCreateManyProjectInputEnvelope = {
    data: FileStatusCreateManyProjectInput | FileStatusCreateManyProjectInput[]
  }

  export type UserUpsertWithoutProjectsInput = {
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type UserUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    machines?: MachineUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    fileStatus?: FileStatusUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    machines?: MachineUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MachineUpsertWithoutProjectsInput = {
    update: XOR<MachineUpdateWithoutProjectsInput, MachineUncheckedUpdateWithoutProjectsInput>
    create: XOR<MachineCreateWithoutProjectsInput, MachineUncheckedCreateWithoutProjectsInput>
    where?: MachineWhereInput
  }

  export type MachineUpdateToOneWithWhereWithoutProjectsInput = {
    where?: MachineWhereInput
    data: XOR<MachineUpdateWithoutProjectsInput, MachineUncheckedUpdateWithoutProjectsInput>
  }

  export type MachineUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    machineName?: NullableStringFieldUpdateOperationsInput | string | null
    osInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutMachinesNestedInput
    sessions?: SessionUpdateManyWithoutMachineNestedInput
    messages?: MessageUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    machineName?: NullableStringFieldUpdateOperationsInput | string | null
    osInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    sessions?: SessionUncheckedUpdateManyWithoutMachineNestedInput
    messages?: MessageUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type SessionUpsertWithWhereUniqueWithoutProjectInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutProjectInput, SessionUncheckedUpdateWithoutProjectInput>
    create: XOR<SessionCreateWithoutProjectInput, SessionUncheckedCreateWithoutProjectInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutProjectInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutProjectInput, SessionUncheckedUpdateWithoutProjectInput>
  }

  export type SessionUpdateManyWithWhereWithoutProjectInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutProjectInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutProjectInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutProjectInput, MessageUncheckedUpdateWithoutProjectInput>
    create: XOR<MessageCreateWithoutProjectInput, MessageUncheckedCreateWithoutProjectInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutProjectInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutProjectInput, MessageUncheckedUpdateWithoutProjectInput>
  }

  export type MessageUpdateManyWithWhereWithoutProjectInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutProjectInput>
  }

  export type FileStatusUpsertWithWhereUniqueWithoutProjectInput = {
    where: FileStatusWhereUniqueInput
    update: XOR<FileStatusUpdateWithoutProjectInput, FileStatusUncheckedUpdateWithoutProjectInput>
    create: XOR<FileStatusCreateWithoutProjectInput, FileStatusUncheckedCreateWithoutProjectInput>
  }

  export type FileStatusUpdateWithWhereUniqueWithoutProjectInput = {
    where: FileStatusWhereUniqueInput
    data: XOR<FileStatusUpdateWithoutProjectInput, FileStatusUncheckedUpdateWithoutProjectInput>
  }

  export type FileStatusUpdateManyWithWhereWithoutProjectInput = {
    where: FileStatusScalarWhereInput
    data: XOR<FileStatusUpdateManyMutationInput, FileStatusUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectCreateWithoutSessionsInput = {
    id: string
    projectName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    user: UserCreateNestedOneWithoutProjectsInput
    machine: MachineCreateNestedOneWithoutProjectsInput
    messages?: MessageCreateNestedManyWithoutProjectInput
    fileStatus?: FileStatusCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutSessionsInput = {
    id: string
    projectName: string
    userId: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    messages?: MessageUncheckedCreateNestedManyWithoutProjectInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutSessionsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutSessionsInput, ProjectUncheckedCreateWithoutSessionsInput>
  }

  export type UserCreateWithoutSessionsInput = {
    id: string
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    machines?: MachineCreateNestedManyWithoutUserInput
    projects?: ProjectCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    fileStatus?: FileStatusCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id: string
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    machines?: MachineUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type MachineCreateWithoutSessionsInput = {
    id: string
    machineName?: string | null
    osInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    user: UserCreateNestedOneWithoutMachinesInput
    projects?: ProjectCreateNestedManyWithoutMachineInput
    messages?: MessageCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateWithoutSessionsInput = {
    id: string
    userId: string
    machineName?: string | null
    osInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    projects?: ProjectUncheckedCreateNestedManyWithoutMachineInput
    messages?: MessageUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineCreateOrConnectWithoutSessionsInput = {
    where: MachineWhereUniqueInput
    create: XOR<MachineCreateWithoutSessionsInput, MachineUncheckedCreateWithoutSessionsInput>
  }

  export type MessageCreateWithoutSessionInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
    project: ProjectCreateNestedOneWithoutMessagesInput
    user: UserCreateNestedOneWithoutMessagesInput
    machine: MachineCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutSessionInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    projectId: string
    userId: string
    clientMachineId: string
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
  }

  export type MessageCreateOrConnectWithoutSessionInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSessionInput, MessageUncheckedCreateWithoutSessionInput>
  }

  export type MessageCreateManySessionInputEnvelope = {
    data: MessageCreateManySessionInput | MessageCreateManySessionInput[]
  }

  export type FileStatusCreateWithoutSessionInput = {
    filePath: string
    fileSize?: bigint | number | null
    lastModified?: Date | string | null
    lastProcessedLine?: bigint | number
    lastProcessedAt?: Date | string | null
    checksum?: string | null
    project?: ProjectCreateNestedOneWithoutFileStatusInput
    user?: UserCreateNestedOneWithoutFileStatusInput
  }

  export type FileStatusUncheckedCreateWithoutSessionInput = {
    filePath: string
    projectId?: string | null
    userId?: string | null
    fileSize?: bigint | number | null
    lastModified?: Date | string | null
    lastProcessedLine?: bigint | number
    lastProcessedAt?: Date | string | null
    checksum?: string | null
  }

  export type FileStatusCreateOrConnectWithoutSessionInput = {
    where: FileStatusWhereUniqueInput
    create: XOR<FileStatusCreateWithoutSessionInput, FileStatusUncheckedCreateWithoutSessionInput>
  }

  export type FileStatusCreateManySessionInputEnvelope = {
    data: FileStatusCreateManySessionInput | FileStatusCreateManySessionInput[]
  }

  export type ProjectUpsertWithoutSessionsInput = {
    update: XOR<ProjectUpdateWithoutSessionsInput, ProjectUncheckedUpdateWithoutSessionsInput>
    create: XOR<ProjectCreateWithoutSessionsInput, ProjectUncheckedCreateWithoutSessionsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutSessionsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutSessionsInput, ProjectUncheckedUpdateWithoutSessionsInput>
  }

  export type ProjectUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    machine?: MachineUpdateOneRequiredWithoutProjectsNestedInput
    messages?: MessageUpdateManyWithoutProjectNestedInput
    fileStatus?: FileStatusUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    messages?: MessageUncheckedUpdateManyWithoutProjectNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    machines?: MachineUpdateManyWithoutUserNestedInput
    projects?: ProjectUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    fileStatus?: FileStatusUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    machines?: MachineUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MachineUpsertWithoutSessionsInput = {
    update: XOR<MachineUpdateWithoutSessionsInput, MachineUncheckedUpdateWithoutSessionsInput>
    create: XOR<MachineCreateWithoutSessionsInput, MachineUncheckedCreateWithoutSessionsInput>
    where?: MachineWhereInput
  }

  export type MachineUpdateToOneWithWhereWithoutSessionsInput = {
    where?: MachineWhereInput
    data: XOR<MachineUpdateWithoutSessionsInput, MachineUncheckedUpdateWithoutSessionsInput>
  }

  export type MachineUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    machineName?: NullableStringFieldUpdateOperationsInput | string | null
    osInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutMachinesNestedInput
    projects?: ProjectUpdateManyWithoutMachineNestedInput
    messages?: MessageUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    machineName?: NullableStringFieldUpdateOperationsInput | string | null
    osInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    projects?: ProjectUncheckedUpdateManyWithoutMachineNestedInput
    messages?: MessageUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutSessionInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSessionInput, MessageUncheckedUpdateWithoutSessionInput>
    create: XOR<MessageCreateWithoutSessionInput, MessageUncheckedCreateWithoutSessionInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSessionInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSessionInput, MessageUncheckedUpdateWithoutSessionInput>
  }

  export type MessageUpdateManyWithWhereWithoutSessionInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSessionInput>
  }

  export type FileStatusUpsertWithWhereUniqueWithoutSessionInput = {
    where: FileStatusWhereUniqueInput
    update: XOR<FileStatusUpdateWithoutSessionInput, FileStatusUncheckedUpdateWithoutSessionInput>
    create: XOR<FileStatusCreateWithoutSessionInput, FileStatusUncheckedCreateWithoutSessionInput>
  }

  export type FileStatusUpdateWithWhereUniqueWithoutSessionInput = {
    where: FileStatusWhereUniqueInput
    data: XOR<FileStatusUpdateWithoutSessionInput, FileStatusUncheckedUpdateWithoutSessionInput>
  }

  export type FileStatusUpdateManyWithWhereWithoutSessionInput = {
    where: FileStatusScalarWhereInput
    data: XOR<FileStatusUpdateManyMutationInput, FileStatusUncheckedUpdateManyWithoutSessionInput>
  }

  export type SessionCreateWithoutMessagesInput = {
    id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    project: ProjectCreateNestedOneWithoutSessionsInput
    user: UserCreateNestedOneWithoutSessionsInput
    machine: MachineCreateNestedOneWithoutSessionsInput
    fileStatus?: FileStatusCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateWithoutMessagesInput = {
    id: string
    projectId: string
    userId: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutMessagesInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutMessagesInput, SessionUncheckedCreateWithoutMessagesInput>
  }

  export type ProjectCreateWithoutMessagesInput = {
    id: string
    projectName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    user: UserCreateNestedOneWithoutProjectsInput
    machine: MachineCreateNestedOneWithoutProjectsInput
    sessions?: SessionCreateNestedManyWithoutProjectInput
    fileStatus?: FileStatusCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutMessagesInput = {
    id: string
    projectName: string
    userId: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    sessions?: SessionUncheckedCreateNestedManyWithoutProjectInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutMessagesInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutMessagesInput, ProjectUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutMessagesInput = {
    id: string
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    machines?: MachineCreateNestedManyWithoutUserInput
    projects?: ProjectCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    fileStatus?: FileStatusCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id: string
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    machines?: MachineUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    fileStatus?: FileStatusUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type MachineCreateWithoutMessagesInput = {
    id: string
    machineName?: string | null
    osInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    user: UserCreateNestedOneWithoutMachinesInput
    projects?: ProjectCreateNestedManyWithoutMachineInput
    sessions?: SessionCreateNestedManyWithoutMachineInput
  }

  export type MachineUncheckedCreateWithoutMessagesInput = {
    id: string
    userId: string
    machineName?: string | null
    osInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    projects?: ProjectUncheckedCreateNestedManyWithoutMachineInput
    sessions?: SessionUncheckedCreateNestedManyWithoutMachineInput
  }

  export type MachineCreateOrConnectWithoutMessagesInput = {
    where: MachineWhereUniqueInput
    create: XOR<MachineCreateWithoutMessagesInput, MachineUncheckedCreateWithoutMessagesInput>
  }

  export type SessionUpsertWithoutMessagesInput = {
    update: XOR<SessionUpdateWithoutMessagesInput, SessionUncheckedUpdateWithoutMessagesInput>
    create: XOR<SessionCreateWithoutMessagesInput, SessionUncheckedCreateWithoutMessagesInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutMessagesInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutMessagesInput, SessionUncheckedUpdateWithoutMessagesInput>
  }

  export type SessionUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    project?: ProjectUpdateOneRequiredWithoutSessionsNestedInput
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
    machine?: MachineUpdateOneRequiredWithoutSessionsNestedInput
    fileStatus?: FileStatusUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    fileStatus?: FileStatusUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ProjectUpsertWithoutMessagesInput = {
    update: XOR<ProjectUpdateWithoutMessagesInput, ProjectUncheckedUpdateWithoutMessagesInput>
    create: XOR<ProjectCreateWithoutMessagesInput, ProjectUncheckedCreateWithoutMessagesInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutMessagesInput, ProjectUncheckedUpdateWithoutMessagesInput>
  }

  export type ProjectUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    machine?: MachineUpdateOneRequiredWithoutProjectsNestedInput
    sessions?: SessionUpdateManyWithoutProjectNestedInput
    fileStatus?: FileStatusUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    sessions?: SessionUncheckedUpdateManyWithoutProjectNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    machines?: MachineUpdateManyWithoutUserNestedInput
    projects?: ProjectUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    fileStatus?: FileStatusUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    machines?: MachineUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MachineUpsertWithoutMessagesInput = {
    update: XOR<MachineUpdateWithoutMessagesInput, MachineUncheckedUpdateWithoutMessagesInput>
    create: XOR<MachineCreateWithoutMessagesInput, MachineUncheckedCreateWithoutMessagesInput>
    where?: MachineWhereInput
  }

  export type MachineUpdateToOneWithWhereWithoutMessagesInput = {
    where?: MachineWhereInput
    data: XOR<MachineUpdateWithoutMessagesInput, MachineUncheckedUpdateWithoutMessagesInput>
  }

  export type MachineUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    machineName?: NullableStringFieldUpdateOperationsInput | string | null
    osInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutMachinesNestedInput
    projects?: ProjectUpdateManyWithoutMachineNestedInput
    sessions?: SessionUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    machineName?: NullableStringFieldUpdateOperationsInput | string | null
    osInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    projects?: ProjectUncheckedUpdateManyWithoutMachineNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type ProjectCreateWithoutFileStatusInput = {
    id: string
    projectName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    user: UserCreateNestedOneWithoutProjectsInput
    machine: MachineCreateNestedOneWithoutProjectsInput
    sessions?: SessionCreateNestedManyWithoutProjectInput
    messages?: MessageCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutFileStatusInput = {
    id: string
    projectName: string
    userId: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    sessions?: SessionUncheckedCreateNestedManyWithoutProjectInput
    messages?: MessageUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutFileStatusInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutFileStatusInput, ProjectUncheckedCreateWithoutFileStatusInput>
  }

  export type SessionCreateWithoutFileStatusInput = {
    id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    project: ProjectCreateNestedOneWithoutSessionsInput
    user: UserCreateNestedOneWithoutSessionsInput
    machine: MachineCreateNestedOneWithoutSessionsInput
    messages?: MessageCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateWithoutFileStatusInput = {
    id: string
    projectId: string
    userId: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    messages?: MessageUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutFileStatusInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutFileStatusInput, SessionUncheckedCreateWithoutFileStatusInput>
  }

  export type UserCreateWithoutFileStatusInput = {
    id: string
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    machines?: MachineCreateNestedManyWithoutUserInput
    projects?: ProjectCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFileStatusInput = {
    id: string
    email?: string | null
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
    machines?: MachineUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFileStatusInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFileStatusInput, UserUncheckedCreateWithoutFileStatusInput>
  }

  export type ProjectUpsertWithoutFileStatusInput = {
    update: XOR<ProjectUpdateWithoutFileStatusInput, ProjectUncheckedUpdateWithoutFileStatusInput>
    create: XOR<ProjectCreateWithoutFileStatusInput, ProjectUncheckedCreateWithoutFileStatusInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutFileStatusInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutFileStatusInput, ProjectUncheckedUpdateWithoutFileStatusInput>
  }

  export type ProjectUpdateWithoutFileStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    machine?: MachineUpdateOneRequiredWithoutProjectsNestedInput
    sessions?: SessionUpdateManyWithoutProjectNestedInput
    messages?: MessageUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutFileStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    sessions?: SessionUncheckedUpdateManyWithoutProjectNestedInput
    messages?: MessageUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type SessionUpsertWithoutFileStatusInput = {
    update: XOR<SessionUpdateWithoutFileStatusInput, SessionUncheckedUpdateWithoutFileStatusInput>
    create: XOR<SessionCreateWithoutFileStatusInput, SessionUncheckedCreateWithoutFileStatusInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutFileStatusInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutFileStatusInput, SessionUncheckedUpdateWithoutFileStatusInput>
  }

  export type SessionUpdateWithoutFileStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    project?: ProjectUpdateOneRequiredWithoutSessionsNestedInput
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
    machine?: MachineUpdateOneRequiredWithoutSessionsNestedInput
    messages?: MessageUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutFileStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    messages?: MessageUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type UserUpsertWithoutFileStatusInput = {
    update: XOR<UserUpdateWithoutFileStatusInput, UserUncheckedUpdateWithoutFileStatusInput>
    create: XOR<UserCreateWithoutFileStatusInput, UserUncheckedCreateWithoutFileStatusInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFileStatusInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFileStatusInput, UserUncheckedUpdateWithoutFileStatusInput>
  }

  export type UserUpdateWithoutFileStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    machines?: MachineUpdateManyWithoutUserNestedInput
    projects?: ProjectUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFileStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    machines?: MachineUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MachineCreateManyUserInput = {
    id: string
    machineName?: string | null
    osInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    totalProjects?: number
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
  }

  export type ProjectCreateManyUserInput = {
    id: string
    projectName: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
  }

  export type SessionCreateManyUserInput = {
    id: string
    projectId: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
  }

  export type MessageCreateManyUserInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    sessionId: string
    projectId: string
    clientMachineId: string
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
  }

  export type FileStatusCreateManyUserInput = {
    filePath: string
    projectId?: string | null
    sessionId?: string | null
    fileSize?: bigint | number | null
    lastModified?: Date | string | null
    lastProcessedLine?: bigint | number
    lastProcessedAt?: Date | string | null
    checksum?: string | null
  }

  export type MachineUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    machineName?: NullableStringFieldUpdateOperationsInput | string | null
    osInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    projects?: ProjectUpdateManyWithoutMachineNestedInput
    sessions?: SessionUpdateManyWithoutMachineNestedInput
    messages?: MessageUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    machineName?: NullableStringFieldUpdateOperationsInput | string | null
    osInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    projects?: ProjectUncheckedUpdateManyWithoutMachineNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutMachineNestedInput
    messages?: MessageUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type MachineUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    machineName?: NullableStringFieldUpdateOperationsInput | string | null
    osInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalProjects?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProjectUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    machine?: MachineUpdateOneRequiredWithoutProjectsNestedInput
    sessions?: SessionUpdateManyWithoutProjectNestedInput
    messages?: MessageUpdateManyWithoutProjectNestedInput
    fileStatus?: FileStatusUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    sessions?: SessionUncheckedUpdateManyWithoutProjectNestedInput
    messages?: MessageUncheckedUpdateManyWithoutProjectNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    project?: ProjectUpdateOneRequiredWithoutSessionsNestedInput
    machine?: MachineUpdateOneRequiredWithoutSessionsNestedInput
    messages?: MessageUpdateManyWithoutSessionNestedInput
    fileStatus?: FileStatusUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    messages?: MessageUncheckedUpdateManyWithoutSessionNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type MessageUpdateWithoutUserInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    session?: SessionUpdateOneRequiredWithoutMessagesNestedInput
    project?: ProjectUpdateOneRequiredWithoutMessagesNestedInput
    machine?: MachineUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutUserInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MessageUncheckedUpdateManyWithoutUserInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type FileStatusUpdateWithoutUserInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProcessedLine?: BigIntFieldUpdateOperationsInput | bigint | number
    lastProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneWithoutFileStatusNestedInput
    session?: SessionUpdateOneWithoutFileStatusNestedInput
  }

  export type FileStatusUncheckedUpdateWithoutUserInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProcessedLine?: BigIntFieldUpdateOperationsInput | bigint | number
    lastProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileStatusUncheckedUpdateManyWithoutUserInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProcessedLine?: BigIntFieldUpdateOperationsInput | bigint | number
    lastProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectCreateManyMachineInput = {
    id: string
    projectName: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalSessions?: number
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
  }

  export type SessionCreateManyMachineInput = {
    id: string
    projectId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
  }

  export type MessageCreateManyMachineInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    sessionId: string
    projectId: string
    userId: string
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
  }

  export type ProjectUpdateWithoutMachineInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    sessions?: SessionUpdateManyWithoutProjectNestedInput
    messages?: MessageUpdateManyWithoutProjectNestedInput
    fileStatus?: FileStatusUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutMachineInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    sessions?: SessionUncheckedUpdateManyWithoutProjectNestedInput
    messages?: MessageUncheckedUpdateManyWithoutProjectNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutMachineInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectName?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type SessionUpdateWithoutMachineInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    project?: ProjectUpdateOneRequiredWithoutSessionsNestedInput
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
    messages?: MessageUpdateManyWithoutSessionNestedInput
    fileStatus?: FileStatusUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutMachineInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    messages?: MessageUncheckedUpdateManyWithoutSessionNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateManyWithoutMachineInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type MessageUpdateWithoutMachineInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    session?: SessionUpdateOneRequiredWithoutMessagesNestedInput
    project?: ProjectUpdateOneRequiredWithoutMessagesNestedInput
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutMachineInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MessageUncheckedUpdateManyWithoutMachineInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type SessionCreateManyProjectInput = {
    id: string
    userId: string
    clientMachineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalMessages?: bigint | number
    totalCost?: Decimal | DecimalJsLike | number | string
    totalInputTokens?: bigint | number
    totalOutputTokens?: bigint | number
    totalCacheCreationTokens?: bigint | number
    totalCacheReadTokens?: bigint | number
  }

  export type MessageCreateManyProjectInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    sessionId: string
    userId: string
    clientMachineId: string
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
  }

  export type FileStatusCreateManyProjectInput = {
    filePath: string
    sessionId?: string | null
    userId?: string | null
    fileSize?: bigint | number | null
    lastModified?: Date | string | null
    lastProcessedLine?: bigint | number
    lastProcessedAt?: Date | string | null
    checksum?: string | null
  }

  export type SessionUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
    machine?: MachineUpdateOneRequiredWithoutSessionsNestedInput
    messages?: MessageUpdateManyWithoutSessionNestedInput
    fileStatus?: FileStatusUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    messages?: MessageUncheckedUpdateManyWithoutSessionNestedInput
    fileStatus?: FileStatusUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMessages?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalInputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalOutputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    totalCacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type MessageUpdateWithoutProjectInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    session?: SessionUpdateOneRequiredWithoutMessagesNestedInput
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    machine?: MachineUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutProjectInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MessageUncheckedUpdateManyWithoutProjectInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type FileStatusUpdateWithoutProjectInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProcessedLine?: BigIntFieldUpdateOperationsInput | bigint | number
    lastProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateOneWithoutFileStatusNestedInput
    user?: UserUpdateOneWithoutFileStatusNestedInput
  }

  export type FileStatusUncheckedUpdateWithoutProjectInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProcessedLine?: BigIntFieldUpdateOperationsInput | bigint | number
    lastProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileStatusUncheckedUpdateManyWithoutProjectInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProcessedLine?: BigIntFieldUpdateOperationsInput | bigint | number
    lastProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateManySessionInput = {
    uuid: string
    messageId: string
    requestId?: string | null
    projectId: string
    userId: string
    clientMachineId: string
    timestamp?: Date | string | null
    role: string
    model?: string | null
    type?: string | null
    inputTokens?: bigint | number
    outputTokens?: bigint | number
    cacheCreationTokens?: bigint | number
    cacheReadTokens?: bigint | number
    pricePerInputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: number | null
    messageCost?: Decimal | DecimalJsLike | number | string
  }

  export type FileStatusCreateManySessionInput = {
    filePath: string
    projectId?: string | null
    userId?: string | null
    fileSize?: bigint | number | null
    lastModified?: Date | string | null
    lastProcessedLine?: bigint | number
    lastProcessedAt?: Date | string | null
    checksum?: string | null
  }

  export type MessageUpdateWithoutSessionInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    project?: ProjectUpdateOneRequiredWithoutMessagesNestedInput
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    machine?: MachineUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSessionInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MessageUncheckedUpdateManyWithoutSessionInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clientMachineId?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    inputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    outputTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheCreationTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    cacheReadTokens?: BigIntFieldUpdateOperationsInput | bigint | number
    pricePerInputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerOutputToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheWriteToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerCacheReadToken?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    cacheDurationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    messageCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type FileStatusUpdateWithoutSessionInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProcessedLine?: BigIntFieldUpdateOperationsInput | bigint | number
    lastProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneWithoutFileStatusNestedInput
    user?: UserUpdateOneWithoutFileStatusNestedInput
  }

  export type FileStatusUncheckedUpdateWithoutSessionInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProcessedLine?: BigIntFieldUpdateOperationsInput | bigint | number
    lastProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileStatusUncheckedUpdateManyWithoutSessionInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastProcessedLine?: BigIntFieldUpdateOperationsInput | bigint | number
    lastProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}